
Esterel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010a  00800200  00001910  000019a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001910  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  0080030a  0080030a  00001aae  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001aae  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000045c  00000000  00000000  00001ace  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000123d  00000000  00000000  00001f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000037e  00000000  00000000  00003167  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000fc3  00000000  00000000  000034e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000330  00000000  00000000  000044a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000507  00000000  00000000  000047d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000460  00000000  00000000  00004cdf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_25>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <reverse+0xe>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	13 e0       	ldi	r17, 0x03	; 3
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e0 e1       	ldi	r30, 0x10	; 16
     17e:	f9 e1       	ldi	r31, 0x19	; 25
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	aa 30       	cpi	r26, 0x0A	; 10
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	13 e0       	ldi	r17, 0x03	; 3
     192:	aa e0       	ldi	r26, 0x0A	; 10
     194:	b3 e0       	ldi	r27, 0x03	; 3
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a8 32       	cpi	r26, 0x28	; 40
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 92 04 	call	0x924	; 0x924 <main>
     1a4:	0c 94 86 0c 	jmp	0x190c	; 0x190c <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <__vector_25>:

// motion functions
int gesture;

SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
     1ac:	1f 92       	push	r1
     1ae:	0f 92       	push	r0
     1b0:	0f b6       	in	r0, 0x3f	; 63
     1b2:	0f 92       	push	r0
     1b4:	0b b6       	in	r0, 0x3b	; 59
     1b6:	0f 92       	push	r0
     1b8:	11 24       	eor	r1, r1
     1ba:	8f 93       	push	r24
     1bc:	9f 93       	push	r25
     1be:	ef 93       	push	r30
     1c0:	ff 93       	push	r31
	cli();
     1c2:	f8 94       	cli
	gesture = UDR0 - 48; 				//making copy of data
     1c4:	e6 ec       	ldi	r30, 0xC6	; 198
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	80 81       	ld	r24, Z
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	c0 97       	sbiw	r24, 0x30	; 48
     1ce:	90 93 1d 03 	sts	0x031D, r25
     1d2:	80 93 1c 03 	sts	0x031C, r24
	UDR0 = gesture;
     1d6:	80 83       	st	Z, r24
	sei();
     1d8:	78 94       	sei
}
     1da:	ff 91       	pop	r31
     1dc:	ef 91       	pop	r30
     1de:	9f 91       	pop	r25
     1e0:	8f 91       	pop	r24
     1e2:	0f 90       	pop	r0
     1e4:	0b be       	out	0x3b, r0	; 59
     1e6:	0f 90       	pop	r0
     1e8:	0f be       	out	0x3f, r0	; 63
     1ea:	0f 90       	pop	r0
     1ec:	1f 90       	pop	r1
     1ee:	18 95       	reti

000001f0 <motion_pin_config>:


void motion_pin_config (void)
{
 DDRA = DDRA | 0x0F;
     1f0:	81 b1       	in	r24, 0x01	; 1
     1f2:	8f 60       	ori	r24, 0x0F	; 15
     1f4:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     1f6:	82 b1       	in	r24, 0x02	; 2
     1f8:	80 7f       	andi	r24, 0xF0	; 240
     1fa:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     1fc:	ea e0       	ldi	r30, 0x0A	; 10
     1fe:	f1 e0       	ldi	r31, 0x01	; 1
     200:	80 81       	ld	r24, Z
     202:	88 61       	ori	r24, 0x18	; 24
     204:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     206:	eb e0       	ldi	r30, 0x0B	; 11
     208:	f1 e0       	ldi	r31, 0x01	; 1
     20a:	80 81       	ld	r24, Z
     20c:	88 61       	ori	r24, 0x18	; 24
     20e:	80 83       	st	Z, r24
}
     210:	08 95       	ret

00000212 <uart0_init>:

void uart0_init(void)
{
 UCSR0B = 0x00; //disable while setting baud rate
     212:	e1 ec       	ldi	r30, 0xC1	; 193
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	10 82       	st	Z, r1
 UCSR0A = 0x00;
     218:	10 92 c0 00 	sts	0x00C0, r1
 UCSR0C = 0x06;
     21c:	86 e0       	ldi	r24, 0x06	; 6
     21e:	80 93 c2 00 	sts	0x00C2, r24
 UBRR0L = 0x5F; //set baud rate lo
     222:	8f e5       	ldi	r24, 0x5F	; 95
     224:	80 93 c4 00 	sts	0x00C4, r24
 UBRR0H = 0x00; //set baud rate hi
     228:	10 92 c5 00 	sts	0x00C5, r1
 UCSR0B = 0x98;
     22c:	88 e9       	ldi	r24, 0x98	; 152
     22e:	80 83       	st	Z, r24
}
     230:	08 95       	ret

00000232 <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     232:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     234:	90 7f       	andi	r25, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     236:	8f 70       	andi	r24, 0x0F	; 15
     238:	89 2b       	or	r24, r25
 PORTA = PortARestore; 			// setting the command to the port
     23a:	82 b9       	out	0x02, r24	; 2

}
     23c:	08 95       	ret

0000023e <MOVE_FWD>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     23e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     240:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     242:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 			// setting the command to the port
     244:	82 b9       	out	0x02, r24	; 2


void MOVE_FWD(void) //both wheels forward
{
  motion_set(0x06);
}
     246:	08 95       	ret

00000248 <MOVE_REV>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     248:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     24a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     24c:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore; 			// setting the command to the port
     24e:	82 b9       	out	0x02, r24	; 2
}

void MOVE_REV(void) //both wheels backward
{
  motion_set(0x09);
}
     250:	08 95       	ret

00000252 <MOVE_LEFT>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     252:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     254:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     256:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 			// setting the command to the port
     258:	82 b9       	out	0x02, r24	; 2
}

void MOVE_LEFT(void) //Left wheel backward, Right wheel forward
{
  motion_set(0x05);
}
     25a:	08 95       	ret

0000025c <MOVE_RIGHT>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     25c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     25e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     260:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 			// setting the command to the port
     262:	82 b9       	out	0x02, r24	; 2
}

void MOVE_RIGHT(void) //Left wheel forward, Right wheel backward
{
  motion_set(0x0A);
}
     264:	08 95       	ret

00000266 <MOVE_SOFT_LEFT>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     266:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     268:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     26a:	84 60       	ori	r24, 0x04	; 4
 PORTA = PortARestore; 			// setting the command to the port
     26c:	82 b9       	out	0x02, r24	; 2
}

void MOVE_SOFT_LEFT (void) //Left wheel stationary, Right wheel forward
{
 motion_set(0x04);
}
     26e:	08 95       	ret

00000270 <MOVE_SOFT_RIGHT>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     270:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     272:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     274:	82 60       	ori	r24, 0x02	; 2
 PORTA = PortARestore; 			// setting the command to the port
     276:	82 b9       	out	0x02, r24	; 2
}

void MOVE_SOFT_RIGHT (void) //Left wheel forward, Right wheel is stationary
{
 motion_set(0x02);
}
     278:	08 95       	ret

0000027a <MOVE_INPLACE_LEFT>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     27a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     27c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     27e:	81 60       	ori	r24, 0x01	; 1
 PORTA = PortARestore; 			// setting the command to the port
     280:	82 b9       	out	0x02, r24	; 2
}

void MOVE_INPLACE_LEFT(void) //Left wheel backward, right wheel stationary
{
 motion_set(0x01);
}
     282:	08 95       	ret

00000284 <MOVE_INPLACE_RIGHT>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     284:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     286:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     288:	88 60       	ori	r24, 0x08	; 8
 PORTA = PortARestore; 			// setting the command to the port
     28a:	82 b9       	out	0x02, r24	; 2
}

void MOVE_INPLACE_RIGHT (void) //Left wheel stationary, Right wheel backward
{
 motion_set(0x08);
}
     28c:	08 95       	ret

0000028e <STOP>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     28e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     290:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
 PORTA = PortARestore; 			// setting the command to the port
     292:	82 b9       	out	0x02, r24	; 2
}

void STOP (void)
{
  motion_set(0x00);
}
     294:	08 95       	ret

00000296 <timer5_init>:
// Prescale:64
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:674.988Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     296:	e1 e2       	ldi	r30, 0x21	; 33
     298:	f1 e0       	ldi	r31, 0x01	; 1
     29a:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     29c:	9f ef       	ldi	r25, 0xFF	; 255
     29e:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     2a8:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     2ac:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     2b0:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     2b4:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     2b8:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     2bc:	90 93 2c 01 	sts	0x012C, r25
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     2c0:	89 ea       	ldi	r24, 0xA9	; 169
     2c2:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionalit to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     2c6:	8b e0       	ldi	r24, 0x0B	; 11
     2c8:	80 83       	st	Z, r24
}
     2ca:	08 95       	ret

000002cc <velocity>:
// Make sure that you pass only unsigned char value.


void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     2cc:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     2d0:	60 93 2a 01 	sts	0x012A, r22
}
     2d4:	08 95       	ret

000002d6 <MOTOR_LEFT_SPEED>:


void MOTOR_LEFT_SPEED(int val)
{
    if ( val > 254 )   //limiting the max velocity
     2d6:	8f 3f       	cpi	r24, 0xFF	; 255
     2d8:	91 05       	cpc	r25, r1
     2da:	14 f0       	brlt	.+4      	; 0x2e0 <MOTOR_LEFT_SPEED+0xa>
     2dc:	8f ef       	ldi	r24, 0xFF	; 255
     2de:	90 e0       	ldi	r25, 0x00	; 0
	   val = 255;	
    OCR5AL = (unsigned char) val;
     2e0:	80 93 28 01 	sts	0x0128, r24
}
     2e4:	08 95       	ret

000002e6 <MOTOR_RIGHT_SPEED>:

void MOTOR_RIGHT_SPEED(int val)
{
  if ( val > 254 )     //limiting the max velocity
     2e6:	8f 3f       	cpi	r24, 0xFF	; 255
     2e8:	91 05       	cpc	r25, r1
     2ea:	14 f0       	brlt	.+4      	; 0x2f0 <MOTOR_RIGHT_SPEED+0xa>
     2ec:	8f ef       	ldi	r24, 0xFF	; 255
     2ee:	90 e0       	ldi	r25, 0x00	; 0
	  val = 255;
  OCR5BL = (unsigned char) val;
     2f0:	80 93 2a 01 	sts	0x012A, r24
}
     2f4:	08 95       	ret

000002f6 <adc_pin_config>:


//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
     2f6:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     2f8:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     2fa:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     2fe:	10 92 08 01 	sts	0x0108, r1
}
     302:	08 95       	ret

00000304 <port_init>:


//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
     304:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     306:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     308:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     30c:	10 92 08 01 	sts	0x0108, r1
void port_init()
{
	
	adc_pin_config();
		
}
     310:	08 95       	ret

00000312 <init_adc>:



void init_adc()
{
	ADCSRA = 0x00;
     312:	ea e7       	ldi	r30, 0x7A	; 122
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     318:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     31c:	80 e2       	ldi	r24, 0x20	; 32
     31e:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     322:	80 e8       	ldi	r24, 0x80	; 128
     324:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     326:	86 e8       	ldi	r24, 0x86	; 134
     328:	80 83       	st	Z, r24
}
     32a:	08 95       	ret

0000032c <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
     32c:	98 2f       	mov	r25, r24
	unsigned char a;
	if(Ch>7)
     32e:	88 30       	cpi	r24, 0x08	; 8
     330:	18 f0       	brcs	.+6      	; 0x338 <ADC_Conversion+0xc>
	{
		ADCSRB = 0x08;
     332:	88 e0       	ldi	r24, 0x08	; 8
     334:	80 93 7b 00 	sts	0x007B, r24
	}
	Ch = Ch & 0x07;  			
	ADMUX= 0x20| Ch;	   		
     338:	97 70       	andi	r25, 0x07	; 7
     33a:	90 62       	ori	r25, 0x20	; 32
     33c:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     340:	80 91 7a 00 	lds	r24, 0x007A
     344:	80 64       	ori	r24, 0x40	; 64
     346:	80 93 7a 00 	sts	0x007A, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     34a:	80 91 7a 00 	lds	r24, 0x007A
     34e:	84 ff       	sbrs	r24, 4
     350:	fc cf       	rjmp	.-8      	; 0x34a <ADC_Conversion+0x1e>
	a=ADCH;
     352:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10;
     356:	90 91 7a 00 	lds	r25, 0x007A
     35a:	90 61       	ori	r25, 0x10	; 16
     35c:	90 93 7a 00 	sts	0x007A, r25
	ADCSRB = 0x00;
     360:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     364:	08 95       	ret

00000366 <init_ir>:
 ***********************************************************************************/

/***** Function to Initialize PORTS *****/
void init_ir()
{
	DDRF = 0x00; 
     366:	10 ba       	out	0x10, r1	; 16
	PORTF = 0x00;
     368:	11 ba       	out	0x11, r1	; 17
	DDRA = 0x0F;
     36a:	8f e0       	ldi	r24, 0x0F	; 15
     36c:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;
     36e:	12 b8       	out	0x02, r1	; 2
	DDRL = 0x18;
     370:	88 e1       	ldi	r24, 0x18	; 24
     372:	80 93 0a 01 	sts	0x010A, r24
	PORTL = 0x18;
     376:	80 93 0b 01 	sts	0x010B, r24
	DDRC = 0xFF;
     37a:	8f ef       	ldi	r24, 0xFF	; 255
     37c:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
     37e:	18 b8       	out	0x08, r1	; 8
	DDRJ = 0x00;
     380:	10 92 04 01 	sts	0x0104, r1
	PORTJ = 0xFF;
     384:	80 93 05 01 	sts	0x0105, r24
}
     388:	08 95       	ret

0000038a <init_lcd>:
int i;


void init_lcd()
{
	DDRF = 0x00; 
     38a:	10 ba       	out	0x10, r1	; 16
	PORTF = 0x00;
     38c:	11 ba       	out	0x11, r1	; 17
	DDRA = 0x0F;
     38e:	8f e0       	ldi	r24, 0x0F	; 15
     390:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;
     392:	12 b8       	out	0x02, r1	; 2
	DDRL = 0x18;
     394:	88 e1       	ldi	r24, 0x18	; 24
     396:	80 93 0a 01 	sts	0x010A, r24
	PORTL = 0x18;
     39a:	80 93 0b 01 	sts	0x010B, r24
	DDRC = 0xFF;
     39e:	8f ef       	ldi	r24, 0xFF	; 255
     3a0:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
     3a2:	18 b8       	out	0x08, r1	; 8
	DDRJ = 0x00;
     3a4:	10 92 04 01 	sts	0x0104, r1
	PORTJ = 0xFF;
     3a8:	80 93 05 01 	sts	0x0105, r24
}
     3ac:	08 95       	ret

000003ae <lcd_set_4bit>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3ae:	8a ef       	ldi	r24, 0xFA	; 250
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	fc 01       	movw	r30, r24
     3b4:	31 97       	sbiw	r30, 0x01	; 1
     3b6:	f1 f7       	brne	.-4      	; 0x3b4 <lcd_set_4bit+0x6>
/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     3b8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     3ba:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     3bc:	40 e3       	ldi	r20, 0x30	; 48
     3be:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     3c0:	42 9a       	sbi	0x08, 2	; 8
     3c2:	22 ee       	ldi	r18, 0xE2	; 226
     3c4:	34 e0       	ldi	r19, 0x04	; 4
     3c6:	f9 01       	movw	r30, r18
     3c8:	31 97       	sbiw	r30, 0x01	; 1
     3ca:	f1 f7       	brne	.-4      	; 0x3c8 <lcd_set_4bit+0x1a>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     3cc:	42 98       	cbi	0x08, 2	; 8
     3ce:	fc 01       	movw	r30, r24
     3d0:	31 97       	sbiw	r30, 0x01	; 1
     3d2:	f1 f7       	brne	.-4      	; 0x3d0 <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     3d4:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     3d6:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     3d8:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     3da:	42 9a       	sbi	0x08, 2	; 8
     3dc:	f9 01       	movw	r30, r18
     3de:	31 97       	sbiw	r30, 0x01	; 1
     3e0:	f1 f7       	brne	.-4      	; 0x3de <lcd_set_4bit+0x30>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     3e2:	42 98       	cbi	0x08, 2	; 8
     3e4:	fc 01       	movw	r30, r24
     3e6:	31 97       	sbiw	r30, 0x01	; 1
     3e8:	f1 f7       	brne	.-4      	; 0x3e6 <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     3ea:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     3ec:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     3ee:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     3f0:	42 9a       	sbi	0x08, 2	; 8
     3f2:	f9 01       	movw	r30, r18
     3f4:	31 97       	sbiw	r30, 0x01	; 1
     3f6:	f1 f7       	brne	.-4      	; 0x3f4 <lcd_set_4bit+0x46>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     3f8:	42 98       	cbi	0x08, 2	; 8
     3fa:	01 97       	sbiw	r24, 0x01	; 1
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     3fe:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     400:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     402:	80 e2       	ldi	r24, 0x20	; 32
     404:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     406:	42 9a       	sbi	0x08, 2	; 8
     408:	c9 01       	movw	r24, r18
     40a:	01 97       	sbiw	r24, 0x01	; 1
     40c:	f1 f7       	brne	.-4      	; 0x40a <lcd_set_4bit+0x5c>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     40e:	42 98       	cbi	0x08, 2	; 8

	
}
     410:	08 95       	ret

00000412 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     412:	98 b1       	in	r25, 0x08	; 8
     414:	9f 70       	andi	r25, 0x0F	; 15
     416:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     418:	28 b1       	in	r18, 0x08	; 8
     41a:	98 2f       	mov	r25, r24
     41c:	90 7f       	andi	r25, 0xF0	; 240
     41e:	92 2b       	or	r25, r18
     420:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     422:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     424:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     426:	42 9a       	sbi	0x08, 2	; 8
     428:	22 ee       	ldi	r18, 0xE2	; 226
     42a:	34 e0       	ldi	r19, 0x04	; 4
     42c:	f9 01       	movw	r30, r18
     42e:	31 97       	sbiw	r30, 0x01	; 1
     430:	f1 f7       	brne	.-4      	; 0x42e <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     432:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     434:	98 b1       	in	r25, 0x08	; 8
     436:	9f 70       	andi	r25, 0x0F	; 15
     438:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     43a:	98 b1       	in	r25, 0x08	; 8
     43c:	82 95       	swap	r24
     43e:	80 7f       	andi	r24, 0xF0	; 240
     440:	98 2b       	or	r25, r24
     442:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     444:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     446:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     448:	42 9a       	sbi	0x08, 2	; 8
     44a:	c9 01       	movw	r24, r18
     44c:	01 97       	sbiw	r24, 0x01	; 1
     44e:	f1 f7       	brne	.-4      	; 0x44c <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     450:	42 98       	cbi	0x08, 2	; 8
}
     452:	08 95       	ret

00000454 <lcd_init>:
     454:	8a ef       	ldi	r24, 0xFA	; 250
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	01 97       	sbiw	r24, 0x01	; 1
     45a:	f1 f7       	brne	.-4      	; 0x458 <lcd_init+0x4>
/*****Function to Initialize LCD*****/
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     45c:	88 e2       	ldi	r24, 0x28	; 40
     45e:	0e 94 09 02 	call	0x412	; 0x412 <lcd_wr_command>
	lcd_wr_command(0x01);
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	0e 94 09 02 	call	0x412	; 0x412 <lcd_wr_command>
	lcd_wr_command(0x06);
     468:	86 e0       	ldi	r24, 0x06	; 6
     46a:	0e 94 09 02 	call	0x412	; 0x412 <lcd_wr_command>
	lcd_wr_command(0x0E);
     46e:	8e e0       	ldi	r24, 0x0E	; 14
     470:	0e 94 09 02 	call	0x412	; 0x412 <lcd_wr_command>
	lcd_wr_command(0x80);
     474:	80 e8       	ldi	r24, 0x80	; 128
     476:	0e 94 09 02 	call	0x412	; 0x412 <lcd_wr_command>
		
}
     47a:	08 95       	ret

0000047c <init_devices>:
}

//Function to initialize ports
void init_devices()
{
	cli();
     47c:	f8 94       	cli
}


void motion_pin_config (void)
{
 DDRA = DDRA | 0x0F;
     47e:	81 b1       	in	r24, 0x01	; 1
     480:	8f 60       	ori	r24, 0x0F	; 15
     482:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     484:	82 b1       	in	r24, 0x02	; 2
     486:	80 7f       	andi	r24, 0xF0	; 240
     488:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     48a:	2a e0       	ldi	r18, 0x0A	; 10
     48c:	31 e0       	ldi	r19, 0x01	; 1
     48e:	f9 01       	movw	r30, r18
     490:	80 81       	ld	r24, Z
     492:	88 61       	ori	r24, 0x18	; 24
     494:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     496:	ab e0       	ldi	r26, 0x0B	; 11
     498:	b1 e0       	ldi	r27, 0x01	; 1
     49a:	8c 91       	ld	r24, X
     49c:	88 61       	ori	r24, 0x18	; 24
     49e:	8c 93       	st	X, r24


//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
     4a0:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     4a2:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     4a4:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     4a8:	10 92 08 01 	sts	0x0108, r1



void init_adc()
{
	ADCSRA = 0x00;
     4ac:	ea e7       	ldi	r30, 0x7A	; 122
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     4b2:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     4b6:	80 e2       	ldi	r24, 0x20	; 32
     4b8:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     4bc:	80 e8       	ldi	r24, 0x80	; 128
     4be:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     4c0:	86 e8       	ldi	r24, 0x86	; 134
     4c2:	80 83       	st	Z, r24
// Prescale:64
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:674.988Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     4c4:	e1 e2       	ldi	r30, 0x21	; 33
     4c6:	f1 e0       	ldi	r31, 0x01	; 1
     4c8:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     4ca:	9f ef       	ldi	r25, 0xFF	; 255
     4cc:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     4d6:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     4da:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     4de:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     4e2:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     4e6:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     4ea:	90 93 2c 01 	sts	0x012C, r25
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     4ee:	89 ea       	ldi	r24, 0xA9	; 169
     4f0:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionalit to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     4f4:	8b e0       	ldi	r24, 0x0B	; 11
     4f6:	80 83       	st	Z, r24
int i;


void init_lcd()
{
	DDRF = 0x00; 
     4f8:	10 ba       	out	0x10, r1	; 16
	PORTF = 0x00;
     4fa:	11 ba       	out	0x11, r1	; 17
	DDRA = 0x0F;
     4fc:	8f e0       	ldi	r24, 0x0F	; 15
     4fe:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;
     500:	12 b8       	out	0x02, r1	; 2
	DDRL = 0x18;
     502:	88 e1       	ldi	r24, 0x18	; 24
     504:	f9 01       	movw	r30, r18
     506:	80 83       	st	Z, r24
	PORTL = 0x18;
     508:	8c 93       	st	X, r24
	DDRC = 0xFF;
     50a:	97 b9       	out	0x07, r25	; 7
	PORTC = 0x00;
     50c:	18 b8       	out	0x08, r1	; 8
	DDRJ = 0x00;
     50e:	10 92 04 01 	sts	0x0104, r1
	PORTJ = 0xFF;
     512:	90 93 05 01 	sts	0x0105, r25
 motion_pin_config();
 port_init();
 init_adc();
 timer5_init();
init_lcd();
lcd_init();
     516:	0e 94 2a 02 	call	0x454	; 0x454 <lcd_init>
lcd_set_4bit();
     51a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_set_4bit>
gesture=0;
     51e:	10 92 1d 03 	sts	0x031D, r1
     522:	10 92 1c 03 	sts	0x031C, r1
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
}

void uart0_init(void)
{
 UCSR0B = 0x00; //disable while setting baud rate
     526:	e1 ec       	ldi	r30, 0xC1	; 193
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	10 82       	st	Z, r1
 UCSR0A = 0x00;
     52c:	10 92 c0 00 	sts	0x00C0, r1
 UCSR0C = 0x06;
     530:	86 e0       	ldi	r24, 0x06	; 6
     532:	80 93 c2 00 	sts	0x00C2, r24
 UBRR0L = 0x5F; //set baud rate lo
     536:	8f e5       	ldi	r24, 0x5F	; 95
     538:	80 93 c4 00 	sts	0x00C4, r24
 UBRR0H = 0x00; //set baud rate hi
     53c:	10 92 c5 00 	sts	0x00C5, r1
 UCSR0B = 0x98;
     540:	88 e9       	ldi	r24, 0x98	; 152
     542:	80 83       	st	Z, r24
// BUZZER Functions

/*****Function to Initialize PORTS*****/
void init_buzzer()
{
	DDRC = DDRC | 0x08;				//Setting PORTC pin3 as outpt
     544:	3b 9a       	sbi	0x07, 3	; 7
	PORTC = 0x00;				//Initialize Values of PORTC to 0.
     546:	18 b8       	out	0x08, r1	; 8
uart0_init();

init_buzzer();


sei();
     548:	78 94       	sei
}
     54a:	08 95       	ret

0000054c <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     54c:	98 b1       	in	r25, 0x08	; 8
     54e:	9f 70       	andi	r25, 0x0F	; 15
     550:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     552:	28 b1       	in	r18, 0x08	; 8
     554:	98 2f       	mov	r25, r24
     556:	90 7f       	andi	r25, 0xF0	; 240
     558:	92 2b       	or	r25, r18
     55a:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     55c:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     55e:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     560:	42 9a       	sbi	0x08, 2	; 8
     562:	22 ee       	ldi	r18, 0xE2	; 226
     564:	34 e0       	ldi	r19, 0x04	; 4
     566:	f9 01       	movw	r30, r18
     568:	31 97       	sbiw	r30, 0x01	; 1
     56a:	f1 f7       	brne	.-4      	; 0x568 <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     56c:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     56e:	98 b1       	in	r25, 0x08	; 8
     570:	9f 70       	andi	r25, 0x0F	; 15
     572:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     574:	98 b1       	in	r25, 0x08	; 8
     576:	82 95       	swap	r24
     578:	80 7f       	andi	r24, 0xF0	; 240
     57a:	98 2b       	or	r25, r24
     57c:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     57e:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     580:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     582:	42 9a       	sbi	0x08, 2	; 8
     584:	c9 01       	movw	r24, r18
     586:	01 97       	sbiw	r24, 0x01	; 1
     588:	f1 f7       	brne	.-4      	; 0x586 <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     58a:	42 98       	cbi	0x08, 2	; 8
}
     58c:	08 95       	ret

0000058e <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
     58e:	80 e8       	ldi	r24, 0x80	; 128
     590:	0e 94 09 02 	call	0x412	; 0x412 <lcd_wr_command>
}
     594:	08 95       	ret

00000596 <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	ec 01       	movw	r28, r24
     59c:	03 c0       	rjmp	.+6      	; 0x5a4 <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     59e:	0e 94 a6 02 	call	0x54c	; 0x54c <lcd_wr_char>
		str++;
     5a2:	21 96       	adiw	r28, 0x01	; 1


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
     5a4:	88 81       	ld	r24, Y
     5a6:	88 23       	and	r24, r24
     5a8:	d1 f7       	brne	.-12     	; 0x59e <lcd_string+0x8>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
	switch (row) {
     5b0:	82 30       	cpi	r24, 0x02	; 2
     5b2:	69 f0       	breq	.+26     	; 0x5ce <lcd_cursor+0x1e>
     5b4:	83 30       	cpi	r24, 0x03	; 3
     5b6:	18 f4       	brcc	.+6      	; 0x5be <lcd_cursor+0xe>
     5b8:	81 30       	cpi	r24, 0x01	; 1
     5ba:	a9 f4       	brne	.+42     	; 0x5e6 <lcd_cursor+0x36>
     5bc:	05 c0       	rjmp	.+10     	; 0x5c8 <lcd_cursor+0x18>
     5be:	83 30       	cpi	r24, 0x03	; 3
     5c0:	49 f0       	breq	.+18     	; 0x5d4 <lcd_cursor+0x24>
     5c2:	84 30       	cpi	r24, 0x04	; 4
     5c4:	81 f4       	brne	.+32     	; 0x5e6 <lcd_cursor+0x36>
     5c6:	0b c0       	rjmp	.+22     	; 0x5de <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     5c8:	86 2f       	mov	r24, r22
     5ca:	81 58       	subi	r24, 0x81	; 129
     5cc:	05 c0       	rjmp	.+10     	; 0x5d8 <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     5ce:	86 2f       	mov	r24, r22
     5d0:	81 54       	subi	r24, 0x41	; 65
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
     5d4:	86 2f       	mov	r24, r22
     5d6:	8d 56       	subi	r24, 0x6D	; 109
     5d8:	0e 94 09 02 	call	0x412	; 0x412 <lcd_wr_command>
     5dc:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     5de:	86 2f       	mov	r24, r22
     5e0:	8d 52       	subi	r24, 0x2D	; 45
     5e2:	0e 94 09 02 	call	0x412	; 0x412 <lcd_wr_command>
     5e6:	08 95       	ret

000005e8 <lcd_print>:
	}
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	8a 01       	movw	r16, r20
     5f2:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     5f4:	88 23       	and	r24, r24
     5f6:	11 f0       	breq	.+4      	; 0x5fc <lcd_print+0x14>
     5f8:	66 23       	and	r22, r22
     5fa:	19 f4       	brne	.+6      	; 0x602 <lcd_print+0x1a>
	{
		lcd_home();
     5fc:	0e 94 c7 02 	call	0x58e	; 0x58e <lcd_home>
     600:	02 c0       	rjmp	.+4      	; 0x606 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     602:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     606:	c5 30       	cpi	r28, 0x05	; 5
     608:	d1 05       	cpc	r29, r1
     60a:	71 f4       	brne	.+28     	; 0x628 <lcd_print+0x40>
	{
		million=value/10000+48;
     60c:	c8 01       	movw	r24, r16
     60e:	60 e1       	ldi	r22, 0x10	; 16
     610:	77 e2       	ldi	r23, 0x27	; 39
     612:	0e 94 ac 09 	call	0x1358	; 0x1358 <__udivmodhi4>
     616:	cb 01       	movw	r24, r22
     618:	c0 96       	adiw	r24, 0x30	; 48
     61a:	90 93 18 03 	sts	0x0318, r25
     61e:	80 93 17 03 	sts	0x0317, r24
		lcd_wr_char(million);
     622:	0e 94 a6 02 	call	0x54c	; 0x54c <lcd_wr_char>
     626:	05 c0       	rjmp	.+10     	; 0x632 <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
     628:	c4 30       	cpi	r28, 0x04	; 4
     62a:	d1 05       	cpc	r29, r1
     62c:	11 f0       	breq	.+4      	; 0x632 <lcd_print+0x4a>
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	16 c0       	rjmp	.+44     	; 0x65e <lcd_print+0x76>
	{
		temp = value/1000;
     632:	c8 01       	movw	r24, r16
     634:	68 ee       	ldi	r22, 0xE8	; 232
     636:	73 e0       	ldi	r23, 0x03	; 3
     638:	0e 94 ac 09 	call	0x1358	; 0x1358 <__udivmodhi4>
     63c:	cb 01       	movw	r24, r22
     63e:	60 93 19 03 	sts	0x0319, r22
     642:	90 93 1a 03 	sts	0x031A, r25
		thousand = temp%10 + 48;
     646:	6a e0       	ldi	r22, 0x0A	; 10
     648:	70 e0       	ldi	r23, 0x00	; 0
     64a:	0e 94 ac 09 	call	0x1358	; 0x1358 <__udivmodhi4>
     64e:	c0 96       	adiw	r24, 0x30	; 48
     650:	90 93 27 03 	sts	0x0327, r25
     654:	80 93 26 03 	sts	0x0326, r24
		lcd_wr_char(thousand);
     658:	0e 94 a6 02 	call	0x54c	; 0x54c <lcd_wr_char>
     65c:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
     65e:	c3 30       	cpi	r28, 0x03	; 3
     660:	d1 05       	cpc	r29, r1
     662:	21 f0       	breq	.+8      	; 0x66c <lcd_print+0x84>
     664:	81 30       	cpi	r24, 0x01	; 1
     666:	11 f0       	breq	.+4      	; 0x66c <lcd_print+0x84>
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	16 c0       	rjmp	.+44     	; 0x698 <lcd_print+0xb0>
	{
		temp = value/100;
     66c:	c8 01       	movw	r24, r16
     66e:	64 e6       	ldi	r22, 0x64	; 100
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	0e 94 ac 09 	call	0x1358	; 0x1358 <__udivmodhi4>
     676:	cb 01       	movw	r24, r22
     678:	60 93 19 03 	sts	0x0319, r22
     67c:	90 93 1a 03 	sts	0x031A, r25
		hundred = temp%10 + 48;
     680:	6a e0       	ldi	r22, 0x0A	; 10
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	0e 94 ac 09 	call	0x1358	; 0x1358 <__udivmodhi4>
     688:	c0 96       	adiw	r24, 0x30	; 48
     68a:	90 93 23 03 	sts	0x0323, r25
     68e:	80 93 22 03 	sts	0x0322, r24
		lcd_wr_char(hundred);
     692:	0e 94 a6 02 	call	0x54c	; 0x54c <lcd_wr_char>
     696:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
     698:	c2 30       	cpi	r28, 0x02	; 2
     69a:	d1 05       	cpc	r29, r1
     69c:	21 f0       	breq	.+8      	; 0x6a6 <lcd_print+0xbe>
     69e:	81 30       	cpi	r24, 0x01	; 1
     6a0:	11 f0       	breq	.+4      	; 0x6a6 <lcd_print+0xbe>
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	16 c0       	rjmp	.+44     	; 0x6d2 <lcd_print+0xea>
	{
		temp = value/10;
     6a6:	c8 01       	movw	r24, r16
     6a8:	6a e0       	ldi	r22, 0x0A	; 10
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	0e 94 ac 09 	call	0x1358	; 0x1358 <__udivmodhi4>
     6b0:	cb 01       	movw	r24, r22
     6b2:	60 93 19 03 	sts	0x0319, r22
     6b6:	90 93 1a 03 	sts	0x031A, r25
		tens = temp%10 + 48;
     6ba:	6a e0       	ldi	r22, 0x0A	; 10
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	0e 94 ac 09 	call	0x1358	; 0x1358 <__udivmodhi4>
     6c2:	c0 96       	adiw	r24, 0x30	; 48
     6c4:	90 93 21 03 	sts	0x0321, r25
     6c8:	80 93 20 03 	sts	0x0320, r24
		lcd_wr_char(tens);
     6cc:	0e 94 a6 02 	call	0x54c	; 0x54c <lcd_wr_char>
     6d0:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
     6d2:	c1 30       	cpi	r28, 0x01	; 1
     6d4:	d1 05       	cpc	r29, r1
     6d6:	11 f0       	breq	.+4      	; 0x6dc <lcd_print+0xf4>
     6d8:	81 30       	cpi	r24, 0x01	; 1
     6da:	61 f4       	brne	.+24     	; 0x6f4 <lcd_print+0x10c>
	{
		unit = value%10 + 48;
     6dc:	c8 01       	movw	r24, r16
     6de:	6a e0       	ldi	r22, 0x0A	; 10
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	0e 94 ac 09 	call	0x1358	; 0x1358 <__udivmodhi4>
     6e6:	c0 96       	adiw	r24, 0x30	; 48
     6e8:	90 93 25 03 	sts	0x0325, r25
     6ec:	80 93 24 03 	sts	0x0324, r24
		lcd_wr_char(unit);
     6f0:	0e 94 a6 02 	call	0x54c	; 0x54c <lcd_wr_char>
	}
	if(digits>5)
     6f4:	26 97       	sbiw	r28, 0x06	; 6
     6f6:	1c f0       	brlt	.+6      	; 0x6fe <lcd_print+0x116>
	{
		lcd_wr_char('E');
     6f8:	85 e4       	ldi	r24, 0x45	; 69
     6fa:	0e 94 a6 02 	call	0x54c	; 0x54c <lcd_wr_char>
	}
	
}
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	1f 91       	pop	r17
     704:	0f 91       	pop	r16
     706:	08 95       	ret

00000708 <LCD_DISPLAY_INT_1>:


void LCD_DISPLAY_INT_1(int val)
{
     708:	ac 01       	movw	r20, r24


 lcd_print(1,1,val,4);
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	61 e0       	ldi	r22, 0x01	; 1
     70e:	24 e0       	ldi	r18, 0x04	; 4
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <lcd_print>

}
     716:	08 95       	ret

00000718 <LCD_DISPLAY_INT_2>:

}*/
	

void LCD_DISPLAY_INT_2(int val)
{	
     718:	ac 01       	movw	r20, r24


lcd_print(2,1,val,4);
     71a:	82 e0       	ldi	r24, 0x02	; 2
     71c:	61 e0       	ldi	r22, 0x01	; 1
     71e:	24 e0       	ldi	r18, 0x04	; 4
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <lcd_print>

}
     726:	08 95       	ret

00000728 <init_buzzer>:
// BUZZER Functions

/*****Function to Initialize PORTS*****/
void init_buzzer()
{
	DDRC = DDRC | 0x08;				//Setting PORTC pin3 as outpt
     728:	3b 9a       	sbi	0x07, 3	; 7
	PORTC = 0x00;				//Initialize Values of PORTC to 0.
     72a:	18 b8       	out	0x08, r1	; 8
}
     72c:	08 95       	ret

0000072e <buzzer_delay>:

/***** Buzzer Delay Function*****/
void buzzer_delay()
{
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	90 e0       	ldi	r25, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     732:	31 e2       	ldi	r19, 0x21	; 33
     734:	23 2f       	mov	r18, r19
     736:	2a 95       	dec	r18
     738:	f1 f7       	brne	.-4      	; 0x736 <buzzer_delay+0x8>
	unsigned int i;
	for(i=0; i<10;i++)
     73a:	01 96       	adiw	r24, 0x01	; 1
     73c:	8a 30       	cpi	r24, 0x0A	; 10
     73e:	91 05       	cpc	r25, r1
     740:	c9 f7       	brne	.-14     	; 0x734 <buzzer_delay+0x6>
	{
		_delay_us(100);
	}
}
     742:	08 95       	ret

00000744 <BUZZER_ON>:

int i=0; 
   unsigned char port_C_copy;
   port_C_copy = PORTC;
   port_C_copy = port_C_copy | 0x08;
   PORTC = port_C_copy;	
     744:	43 9a       	sbi	0x08, 3	; 8
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	31 e2       	ldi	r19, 0x21	; 33
     74c:	23 2f       	mov	r18, r19
     74e:	2a 95       	dec	r18
     750:	f1 f7       	brne	.-4      	; 0x74e <BUZZER_ON+0xa>

/***** Buzzer Delay Function*****/
void buzzer_delay()
{
	unsigned int i;
	for(i=0; i<10;i++)
     752:	01 96       	adiw	r24, 0x01	; 1
     754:	8a 30       	cpi	r24, 0x0A	; 10
     756:	91 05       	cpc	r25, r1
     758:	c9 f7       	brne	.-14     	; 0x74c <BUZZER_ON+0x8>
   //for(i=0;i<10;i++)
	//tick_timer();
	buzzer_delay();
   port_C_copy = PORTC;
   port_C_copy = port_C_copy & 0xF7;
   PORTC = port_C_copy;	
     75a:	43 98       	cbi	0x08, 3	; 8

//PORTC = 0x08;			//Set pin3 to turn the "buzzer ON"
//buzzer_delay();			//delay


}
     75c:	08 95       	ret

0000075e <BUZZER_OFF>:


void BUZZER_OFF()
{

PORTC = 0x00;			//Clear pin3 to turn the "buzzer OFF"
     75e:	18 b8       	out	0x08, r1	; 8
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	31 e2       	ldi	r19, 0x21	; 33
     766:	23 2f       	mov	r18, r19
     768:	2a 95       	dec	r18
     76a:	f1 f7       	brne	.-4      	; 0x768 <BUZZER_OFF+0xa>

/***** Buzzer Delay Function*****/
void buzzer_delay()
{
	unsigned int i;
	for(i=0; i<10;i++)
     76c:	01 96       	adiw	r24, 0x01	; 1
     76e:	8a 30       	cpi	r24, 0x0A	; 10
     770:	91 05       	cpc	r25, r1
     772:	c9 f7       	brne	.-14     	; 0x766 <BUZZER_OFF+0x8>
{

PORTC = 0x00;			//Clear pin3 to turn the "buzzer OFF"
buzzer_delay();			//delay

}
     774:	08 95       	ret

00000776 <Obstacle_Avoidance_I_KINECT>:
static integer MOTOR_LEFT_SPEED_v;
static integer MOTOR_RIGHT_SPEED_v;
static integer fir;
static unsigned char _state_1 = 1;
void Obstacle_Avoidance_I_KINECT(integer _v) {
  _s.KINECT = 1;
     776:	20 91 0e 03 	lds	r18, 0x030E
     77a:	21 60       	ori	r18, 0x01	; 1
     77c:	20 93 0e 03 	sts	0x030E, r18
  KINECT_v = _v;
     780:	90 93 10 03 	sts	0x0310, r25
     784:	80 93 0f 03 	sts	0x030F, r24
}
     788:	08 95       	ret

0000078a <Obstacle_Avoidance_reset>:
  return 1;
}

int Obstacle_Avoidance_reset(void)
{
  _s.KINECT = 0;
     78a:	80 91 0e 03 	lds	r24, 0x030E
     78e:	8e 7f       	andi	r24, 0xFE	; 254
     790:	80 93 0e 03 	sts	0x030E, r24
  return 0;
}
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	08 95       	ret

0000079a <Obstacle_Avoidance_O_MOTOR_RIGHT_SPEED>:
    OCR5AL = (unsigned char) val;
}

void MOTOR_RIGHT_SPEED(int val)
{
  if ( val > 254 )     //limiting the max velocity
     79a:	8f 3f       	cpi	r24, 0xFF	; 255
     79c:	91 05       	cpc	r25, r1
     79e:	14 f0       	brlt	.+4      	; 0x7a4 <Obstacle_Avoidance_O_MOTOR_RIGHT_SPEED+0xa>
     7a0:	8f ef       	ldi	r24, 0xFF	; 255
     7a2:	90 e0       	ldi	r25, 0x00	; 0
	  val = 255;
  OCR5BL = (unsigned char) val;
     7a4:	80 93 2a 01 	sts	0x012A, r24
/****************************** Fire Bird Specific part ***************************/
static int  IR_THRESHHOLD[3] = {50, 50, 50};
Obstacle_Avoidance_O_MOTOR_RIGHT_SPEED(int val)
{
	MOTOR_RIGHT_SPEED(val);
}
     7a8:	08 95       	ret

000007aa <Obstacle_Avoidance_O_MOTOR_LEFT_SPEED>:
}


void MOTOR_LEFT_SPEED(int val)
{
    if ( val > 254 )   //limiting the max velocity
     7aa:	8f 3f       	cpi	r24, 0xFF	; 255
     7ac:	91 05       	cpc	r25, r1
     7ae:	14 f0       	brlt	.+4      	; 0x7b4 <Obstacle_Avoidance_O_MOTOR_LEFT_SPEED+0xa>
     7b0:	8f ef       	ldi	r24, 0xFF	; 255
     7b2:	90 e0       	ldi	r25, 0x00	; 0
	   val = 255;	
    OCR5AL = (unsigned char) val;
     7b4:	80 93 28 01 	sts	0x0128, r24
Obstacle_Avoidance_O_MOTOR_LEFT_SPEED(int val)
{
	MOTOR_LEFT_SPEED(val);
}
     7b8:	08 95       	ret

000007ba <Obstacle_Avoidance>:
}

int Obstacle_Avoidance(void)
{
  /* Vacuous terminate */;
  if (_state_1) {
     7ba:	80 91 00 02 	lds	r24, 0x0200
     7be:	20 91 0e 03 	lds	r18, 0x030E
     7c2:	88 23       	and	r24, r24
     7c4:	21 f0       	breq	.+8      	; 0x7ce <Obstacle_Avoidance+0x14>
    _s.MOTOR_RIGHT_SPEED = 0;;
    _s.MOTOR_LEFT_SPEED = 0;;
    _s.MOVE_REV = 0;;
    _s.MOVE_FWD = 0;;
     7c6:	21 7e       	andi	r18, 0xE1	; 225
     7c8:	20 93 0e 03 	sts	0x030E, r18
     7cc:	63 c0       	rjmp	.+198    	; 0x894 <Obstacle_Avoidance+0xda>
    _state_1 = 0;
  } else {
    if (_s.KINECT) {
     7ce:	20 ff       	sbrs	r18, 0
     7d0:	61 c0       	rjmp	.+194    	; 0x894 <Obstacle_Avoidance+0xda>
      _state_1 = 0;
     7d2:	10 92 00 02 	sts	0x0200, r1
      fir = KINECT_v;
     7d6:	80 91 0f 03 	lds	r24, 0x030F
     7da:	90 91 10 03 	lds	r25, 0x0310
     7de:	90 93 16 03 	sts	0x0316, r25
     7e2:	80 93 15 03 	sts	0x0315, r24
      if ((fir == 1)) {
     7e6:	81 30       	cpi	r24, 0x01	; 1
     7e8:	91 05       	cpc	r25, r1
     7ea:	39 f4       	brne	.+14     	; 0x7fa <Obstacle_Avoidance+0x40>
        _s.MOVE_FWD = 1;
        (MOTOR_LEFT_SPEED_v = 150), (_s.MOTOR_LEFT_SPEED = 1);
     7ec:	86 e9       	ldi	r24, 0x96	; 150
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	90 93 12 03 	sts	0x0312, r25
     7f4:	80 93 11 03 	sts	0x0311, r24
     7f8:	3a c0       	rjmp	.+116    	; 0x86e <Obstacle_Avoidance+0xb4>
        (MOTOR_RIGHT_SPEED_v = 150), (_s.MOTOR_RIGHT_SPEED = 1);
      } else {
        if ((fir == 2)) {
     7fa:	82 30       	cpi	r24, 0x02	; 2
     7fc:	91 05       	cpc	r25, r1
     7fe:	39 f4       	brne	.+14     	; 0x80e <Obstacle_Avoidance+0x54>
          _s.MOVE_FWD = 1;
          (MOTOR_LEFT_SPEED_v = 130), (_s.MOTOR_LEFT_SPEED = 1);
     800:	82 e8       	ldi	r24, 0x82	; 130
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	90 93 12 03 	sts	0x0312, r25
     808:	80 93 11 03 	sts	0x0311, r24
     80c:	3e c0       	rjmp	.+124    	; 0x88a <Obstacle_Avoidance+0xd0>
          (MOTOR_RIGHT_SPEED_v = 0), (_s.MOTOR_RIGHT_SPEED = 1);
        } else {
          if ((fir == 3)) {
     80e:	83 30       	cpi	r24, 0x03	; 3
     810:	91 05       	cpc	r25, r1
     812:	39 f4       	brne	.+14     	; 0x822 <Obstacle_Avoidance+0x68>
            _s.MOVE_FWD = 1;
            (MOTOR_LEFT_SPEED_v = 0), (_s.MOTOR_LEFT_SPEED = 1);
     814:	10 92 12 03 	sts	0x0312, r1
     818:	10 92 11 03 	sts	0x0311, r1
            (MOTOR_RIGHT_SPEED_v = 130), (_s.MOTOR_RIGHT_SPEED = 1);
     81c:	82 e8       	ldi	r24, 0x82	; 130
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	26 c0       	rjmp	.+76     	; 0x86e <Obstacle_Avoidance+0xb4>
          } else {
            if ((fir == 4)) {
     822:	84 30       	cpi	r24, 0x04	; 4
     824:	91 05       	cpc	r25, r1
     826:	61 f4       	brne	.+24     	; 0x840 <Obstacle_Avoidance+0x86>
              _s.MOVE_REV = 1;
              (MOTOR_LEFT_SPEED_v = 150), (_s.MOTOR_LEFT_SPEED = 1);
     828:	86 e9       	ldi	r24, 0x96	; 150
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	90 93 12 03 	sts	0x0312, r25
     830:	80 93 11 03 	sts	0x0311, r24
              (MOTOR_RIGHT_SPEED_v = 150), (_s.MOTOR_RIGHT_SPEED = 1);
     834:	90 93 14 03 	sts	0x0314, r25
     838:	80 93 13 03 	sts	0x0313, r24
     83c:	2c 61       	ori	r18, 0x1C	; 28
     83e:	1c c0       	rjmp	.+56     	; 0x878 <Obstacle_Avoidance+0xbe>
            } else {
              if ((fir == 5)) {
     840:	85 30       	cpi	r24, 0x05	; 5
     842:	91 05       	cpc	r25, r1
     844:	49 f4       	brne	.+18     	; 0x858 <Obstacle_Avoidance+0x9e>
                _s.MOVE_FWD = 1;
                (MOTOR_LEFT_SPEED_v = 150), (_s.MOTOR_LEFT_SPEED = 1);
     846:	86 e9       	ldi	r24, 0x96	; 150
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	90 93 12 03 	sts	0x0312, r25
     84e:	80 93 11 03 	sts	0x0311, r24
                (MOTOR_RIGHT_SPEED_v = 70), (_s.MOTOR_RIGHT_SPEED = 1);
     852:	86 e4       	ldi	r24, 0x46	; 70
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0b c0       	rjmp	.+22     	; 0x86e <Obstacle_Avoidance+0xb4>
              } else {
                if ((fir == 6)) {
     858:	86 30       	cpi	r24, 0x06	; 6
     85a:	91 05       	cpc	r25, r1
     85c:	81 f4       	brne	.+32     	; 0x87e <Obstacle_Avoidance+0xc4>
                  _s.MOVE_FWD = 1;
                  (MOTOR_LEFT_SPEED_v = 70), (_s.MOTOR_LEFT_SPEED = 1);
     85e:	86 e4       	ldi	r24, 0x46	; 70
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	90 93 12 03 	sts	0x0312, r25
     866:	80 93 11 03 	sts	0x0311, r24
                  (MOTOR_RIGHT_SPEED_v = 150), (_s.MOTOR_RIGHT_SPEED = 1);
     86a:	86 e9       	ldi	r24, 0x96	; 150
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	90 93 14 03 	sts	0x0314, r25
     872:	80 93 13 03 	sts	0x0313, r24
     876:	2a 61       	ori	r18, 0x1A	; 26
     878:	20 93 0e 03 	sts	0x030E, r18
     87c:	0d c0       	rjmp	.+26     	; 0x898 <Obstacle_Avoidance+0xde>
                } else {
                  if ((fir == 7)) {
     87e:	07 97       	sbiw	r24, 0x07	; 7
     880:	59 f4       	brne	.+22     	; 0x898 <Obstacle_Avoidance+0xde>
                    _s.MOVE_FWD = 1;
                    (MOTOR_LEFT_SPEED_v = 0), (_s.MOTOR_LEFT_SPEED = 1);
     882:	10 92 12 03 	sts	0x0312, r1
     886:	10 92 11 03 	sts	0x0311, r1
                    (MOTOR_RIGHT_SPEED_v = 0), (_s.MOTOR_RIGHT_SPEED = 1);
     88a:	10 92 14 03 	sts	0x0314, r1
     88e:	10 92 13 03 	sts	0x0313, r1
     892:	f1 cf       	rjmp	.-30     	; 0x876 <Obstacle_Avoidance+0xbc>
            }
          }
        }
      }
    } else {
      _state_1 = 0;
     894:	10 92 00 02 	sts	0x0200, r1
    }
  }
  if (_s.MOVE_FWD) { Obstacle_Avoidance_O_MOVE_FWD(); _s.MOVE_FWD = 0; }
     898:	90 91 0e 03 	lds	r25, 0x030E
     89c:	91 ff       	sbrs	r25, 1
     89e:	07 c0       	rjmp	.+14     	; 0x8ae <Obstacle_Avoidance+0xf4>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     8a0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     8a2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     8a4:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 			// setting the command to the port
     8a6:	82 b9       	out	0x02, r24	; 2
     8a8:	9d 7f       	andi	r25, 0xFD	; 253
     8aa:	90 93 0e 03 	sts	0x030E, r25
  if (_s.MOVE_REV) { Obstacle_Avoidance_O_MOVE_REV(); _s.MOVE_REV = 0; }
     8ae:	90 91 0e 03 	lds	r25, 0x030E
     8b2:	92 ff       	sbrs	r25, 2
     8b4:	07 c0       	rjmp	.+14     	; 0x8c4 <Obstacle_Avoidance+0x10a>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     8b6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     8b8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     8ba:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore; 			// setting the command to the port
     8bc:	82 b9       	out	0x02, r24	; 2
     8be:	9b 7f       	andi	r25, 0xFB	; 251
     8c0:	90 93 0e 03 	sts	0x030E, r25
  if (_s.MOTOR_LEFT_SPEED) { Obstacle_Avoidance_O_MOTOR_LEFT_SPEED(MOTOR_LEFT_SPEED_v); _s.MOTOR_LEFT_SPEED = 0; }
     8c4:	80 91 0e 03 	lds	r24, 0x030E
     8c8:	83 ff       	sbrs	r24, 3
     8ca:	0b c0       	rjmp	.+22     	; 0x8e2 <Obstacle_Avoidance+0x128>
     8cc:	80 91 11 03 	lds	r24, 0x0311
     8d0:	90 91 12 03 	lds	r25, 0x0312
     8d4:	0e 94 d5 03 	call	0x7aa	; 0x7aa <Obstacle_Avoidance_O_MOTOR_LEFT_SPEED>
     8d8:	80 91 0e 03 	lds	r24, 0x030E
     8dc:	87 7f       	andi	r24, 0xF7	; 247
     8de:	80 93 0e 03 	sts	0x030E, r24
  if (_s.MOTOR_RIGHT_SPEED) { Obstacle_Avoidance_O_MOTOR_RIGHT_SPEED(MOTOR_RIGHT_SPEED_v); _s.MOTOR_RIGHT_SPEED = 0; }
     8e2:	80 91 0e 03 	lds	r24, 0x030E
     8e6:	84 ff       	sbrs	r24, 4
     8e8:	0b c0       	rjmp	.+22     	; 0x900 <Obstacle_Avoidance+0x146>
     8ea:	80 91 13 03 	lds	r24, 0x0313
     8ee:	90 91 14 03 	lds	r25, 0x0314
     8f2:	0e 94 cd 03 	call	0x79a	; 0x79a <Obstacle_Avoidance_O_MOTOR_RIGHT_SPEED>
     8f6:	80 91 0e 03 	lds	r24, 0x030E
     8fa:	8f 7e       	andi	r24, 0xEF	; 239
     8fc:	80 93 0e 03 	sts	0x030E, r24
  _s.KINECT = 0;
     900:	80 91 0e 03 	lds	r24, 0x030E
     904:	8e 7f       	andi	r24, 0xFE	; 254
     906:	80 93 0e 03 	sts	0x030E, r24
  return 1;
}
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	08 95       	ret

00000910 <Obstacle_Avoidance_O_MOVE_REV>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     910:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     912:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     914:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore; 			// setting the command to the port
     916:	82 b9       	out	0x02, r24	; 2
	MOTOR_LEFT_SPEED(val);
}
 Obstacle_Avoidance_O_MOVE_REV(void)
{
	MOVE_REV();
}
     918:	08 95       	ret

0000091a <Obstacle_Avoidance_O_MOVE_FWD>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     91a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     91c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     91e:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 			// setting the command to the port
     920:	82 b9       	out	0x02, r24	; 2
Obstacle_Avoidance_O_MOVE_FWD(void)
{
	MOVE_FWD();
}
     922:	08 95       	ret

00000924 <main>:

/****************************** Main function ***************************/
void main()
{
 init_devices();
     924:	0e 94 3e 02 	call	0x47c	; 0x47c <init_devices>
  return 1;
}

int Obstacle_Avoidance_reset(void)
{
  _s.KINECT = 0;
     928:	80 91 0e 03 	lds	r24, 0x030E
     92c:	8e 7f       	andi	r24, 0xFE	; 254
     92e:	80 93 0e 03 	sts	0x030E, r24
/****************************** Main function ***************************/
void main()
{
 init_devices();
 Obstacle_Avoidance_reset();
 Obstacle_Avoidance();
     932:	0e 94 dd 03 	call	0x7ba	; 0x7ba <Obstacle_Avoidance>
 while(1)
 {
  Obstacle_Avoidance_I_KINECT(GESTURE_VALUE);
     936:	20 91 1c 03 	lds	r18, 0x031C
     93a:	30 91 1d 03 	lds	r19, 0x031D
static integer MOTOR_LEFT_SPEED_v;
static integer MOTOR_RIGHT_SPEED_v;
static integer fir;
static unsigned char _state_1 = 1;
void Obstacle_Avoidance_I_KINECT(integer _v) {
  _s.KINECT = 1;
     93e:	80 91 0e 03 	lds	r24, 0x030E
     942:	81 60       	ori	r24, 0x01	; 1
     944:	80 93 0e 03 	sts	0x030E, r24
  KINECT_v = _v;
     948:	30 93 10 03 	sts	0x0310, r19
     94c:	20 93 0f 03 	sts	0x030F, r18
     950:	f0 cf       	rjmp	.-32     	; 0x932 <main+0xe>

00000952 <reverse>:

}

/* reverse: reverse string s in place */
void reverse(char s[])
{
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
    int c, i, j;
    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {
     956:	dc 01       	movw	r26, r24
     958:	0d 90       	ld	r0, X+
     95a:	00 20       	and	r0, r0
     95c:	e9 f7       	brne	.-6      	; 0x958 <reverse+0x6>
     95e:	11 97       	sbiw	r26, 0x01	; 1
     960:	a8 1b       	sub	r26, r24
     962:	b9 0b       	sbc	r27, r25
     964:	ad 01       	movw	r20, r26
     966:	41 50       	subi	r20, 0x01	; 1
     968:	50 40       	sbci	r21, 0x00	; 0
     96a:	ec 01       	movw	r28, r24
     96c:	fc 01       	movw	r30, r24
     96e:	ea 0f       	add	r30, r26
     970:	fb 1f       	adc	r31, r27
     972:	20 e0       	ldi	r18, 0x00	; 0
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	08 c0       	rjmp	.+16     	; 0x988 <reverse+0x36>
        c = s[i];
     978:	98 81       	ld	r25, Y
        s[i] = s[j];
     97a:	80 81       	ld	r24, Z
     97c:	89 93       	st	Y+, r24
        s[j] = c;
     97e:	90 83       	st	Z, r25

/* reverse: reverse string s in place */
void reverse(char s[])
{
    int c, i, j;
    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {
     980:	2f 5f       	subi	r18, 0xFF	; 255
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	41 50       	subi	r20, 0x01	; 1
     986:	50 40       	sbci	r21, 0x00	; 0
     988:	31 97       	sbiw	r30, 0x01	; 1
     98a:	24 17       	cp	r18, r20
     98c:	35 07       	cpc	r19, r21
     98e:	a4 f3       	brlt	.-24     	; 0x978 <reverse+0x26>
        c = s[i];
        s[i] = s[j];
        s[j] = c;
    }
}
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	08 95       	ret

00000996 <itoa1>:
void itoa1(int n, char s[])
{
     996:	ef 92       	push	r14
     998:	ff 92       	push	r15
     99a:	0f 93       	push	r16
     99c:	1f 93       	push	r17
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	8c 01       	movw	r16, r24
     9a4:	7b 01       	movw	r14, r22
     9a6:	9c 01       	movw	r18, r24
     9a8:	97 ff       	sbrs	r25, 7
     9aa:	04 c0       	rjmp	.+8      	; 0x9b4 <itoa1+0x1e>
     9ac:	22 27       	eor	r18, r18
     9ae:	33 27       	eor	r19, r19
     9b0:	28 1b       	sub	r18, r24
     9b2:	39 0b       	sbc	r19, r25
     9b4:	c0 e0       	ldi	r28, 0x00	; 0
     9b6:	d0 e0       	ldi	r29, 0x00	; 0
    int i, sign;
    if ((sign = n) < 0) /* record sign */
         n = -n;          /* make n positive */
    i = 0;
    do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0'; /* get next digit */
     9b8:	f7 01       	movw	r30, r14
     9ba:	ec 0f       	add	r30, r28
     9bc:	fd 1f       	adc	r31, r29
     9be:	c9 01       	movw	r24, r18
     9c0:	6a e0       	ldi	r22, 0x0A	; 10
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	0e 94 c0 09 	call	0x1380	; 0x1380 <__divmodhi4>
     9c8:	80 5d       	subi	r24, 0xD0	; 208
     9ca:	80 83       	st	Z, r24
     9cc:	21 96       	adiw	r28, 0x01	; 1
    } while ((n /= 10) > 0);     /* delete it */
     9ce:	c9 01       	movw	r24, r18
     9d0:	6a e0       	ldi	r22, 0x0A	; 10
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	0e 94 c0 09 	call	0x1380	; 0x1380 <__divmodhi4>
     9d8:	9b 01       	movw	r18, r22
     9da:	16 16       	cp	r1, r22
     9dc:	17 06       	cpc	r1, r23
     9de:	64 f3       	brlt	.-40     	; 0x9b8 <itoa1+0x22>
    if (sign < 0)
     9e0:	17 ff       	sbrs	r17, 7
     9e2:	06 c0       	rjmp	.+12     	; 0x9f0 <itoa1+0x5a>
         s[i++] = '-';
     9e4:	f7 01       	movw	r30, r14
     9e6:	ec 0f       	add	r30, r28
     9e8:	fd 1f       	adc	r31, r29
     9ea:	8d e2       	ldi	r24, 0x2D	; 45
     9ec:	80 83       	st	Z, r24
     9ee:	21 96       	adiw	r28, 0x01	; 1
    s[i] = '\0';
     9f0:	ce 0d       	add	r28, r14
     9f2:	df 1d       	adc	r29, r15
     9f4:	18 82       	st	Y, r1
    reverse(s);
     9f6:	c7 01       	movw	r24, r14
     9f8:	0e 94 a9 04 	call	0x952	; 0x952 <reverse>
}
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	ff 90       	pop	r15
     a06:	ef 90       	pop	r14
     a08:	08 95       	ret

00000a0a <Sharp_estimation>:

unsigned int Sharp_estimation(unsigned char adc_reading)
{
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	bc 01       	movw	r22, r24
     a12:	cd 01       	movw	r24, r26
     a14:	0e 94 97 07 	call	0xf2e	; 0xf2e <__floatunsisf>
     a18:	2f ee       	ldi	r18, 0xEF	; 239
     a1a:	39 ec       	ldi	r19, 0xC9	; 201
     a1c:	43 e9       	ldi	r20, 0x93	; 147
     a1e:	5f e3       	ldi	r21, 0x3F	; 63
     a20:	0e 94 0a 0a 	call	0x1414	; 0x1414 <pow>
     a24:	9b 01       	movw	r18, r22
     a26:	ac 01       	movw	r20, r24
	distanceInt = (int)distance;
     a28:	60 e0       	ldi	r22, 0x00	; 0
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	80 e8       	ldi	r24, 0x80	; 128
     a2e:	9f e3       	ldi	r25, 0x3F	; 63
     a30:	0e 94 39 06 	call	0xc72	; 0xc72 <__divsf3>
     a34:	2a e9       	ldi	r18, 0x9A	; 154
     a36:	39 ef       	ldi	r19, 0xF9	; 249
     a38:	4e e2       	ldi	r20, 0x2E	; 46
     a3a:	55 e4       	ldi	r21, 0x45	; 69
     a3c:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__mulsf3>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 e2       	ldi	r20, 0x20	; 32
     a46:	51 e4       	ldi	r21, 0x41	; 65
     a48:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__mulsf3>
     a4c:	0e 94 43 07 	call	0xe86	; 0xe86 <__fixsfsi>
     a50:	88 27       	eor	r24, r24
     a52:	77 fd       	sbrc	r23, 7
     a54:	80 95       	com	r24
     a56:	98 2f       	mov	r25, r24
     a58:	0e 94 e5 06 	call	0xdca	; 0xdca <__floatsisf>
     a5c:	0e 94 43 07 	call	0xe86	; 0xe86 <__fixsfsi>
     a60:	9b 01       	movw	r18, r22
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	61 32       	cpi	r22, 0x21	; 33
     a66:	78 07       	cpc	r23, r24
     a68:	10 f0       	brcs	.+4      	; 0xa6e <Sharp_estimation+0x64>
     a6a:	20 e2       	ldi	r18, 0x20	; 32
     a6c:	33 e0       	ldi	r19, 0x03	; 3
	if(distanceInt>800)
	{
		distanceInt=800;
	}
	return distanceInt;
}
     a6e:	c9 01       	movw	r24, r18
     a70:	08 95       	ret

00000a72 <front_dist_mm>:
int front_dist_mm(void) 
{
  //float front_distance;
  int front_distance_mm;
  unsigned char analog_val;
  analog_val = ADC_Conversion(11);
     a72:	8b e0       	ldi	r24, 0x0B	; 11
     a74:	0e 94 96 01 	call	0x32c	; 0x32c <ADC_Conversion>
 

 front_distance_mm=Sharp_estimation(analog_val);
     a78:	0e 94 05 05 	call	0xa0a	; 0xa0a <Sharp_estimation>
  return front_distance_mm; 	

  //return 100;
}
     a7c:	08 95       	ret

00000a7e <__mulsf3>:
     a7e:	a0 e2       	ldi	r26, 0x20	; 32
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	e5 e4       	ldi	r30, 0x45	; 69
     a84:	f5 e0       	ldi	r31, 0x05	; 5
     a86:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__prologue_saves__>
     a8a:	69 83       	std	Y+1, r22	; 0x01
     a8c:	7a 83       	std	Y+2, r23	; 0x02
     a8e:	8b 83       	std	Y+3, r24	; 0x03
     a90:	9c 83       	std	Y+4, r25	; 0x04
     a92:	2d 83       	std	Y+5, r18	; 0x05
     a94:	3e 83       	std	Y+6, r19	; 0x06
     a96:	4f 83       	std	Y+7, r20	; 0x07
     a98:	58 87       	std	Y+8, r21	; 0x08
     a9a:	ce 01       	movw	r24, r28
     a9c:	01 96       	adiw	r24, 0x01	; 1
     a9e:	be 01       	movw	r22, r28
     aa0:	67 5f       	subi	r22, 0xF7	; 247
     aa2:	7f 4f       	sbci	r23, 0xFF	; 255
     aa4:	0e 94 34 09 	call	0x1268	; 0x1268 <__unpack_f>
     aa8:	ce 01       	movw	r24, r28
     aaa:	05 96       	adiw	r24, 0x05	; 5
     aac:	be 01       	movw	r22, r28
     aae:	6f 5e       	subi	r22, 0xEF	; 239
     ab0:	7f 4f       	sbci	r23, 0xFF	; 255
     ab2:	0e 94 34 09 	call	0x1268	; 0x1268 <__unpack_f>
     ab6:	99 85       	ldd	r25, Y+9	; 0x09
     ab8:	92 30       	cpi	r25, 0x02	; 2
     aba:	88 f0       	brcs	.+34     	; 0xade <__mulsf3+0x60>
     abc:	89 89       	ldd	r24, Y+17	; 0x11
     abe:	82 30       	cpi	r24, 0x02	; 2
     ac0:	c8 f0       	brcs	.+50     	; 0xaf4 <__mulsf3+0x76>
     ac2:	94 30       	cpi	r25, 0x04	; 4
     ac4:	19 f4       	brne	.+6      	; 0xacc <__mulsf3+0x4e>
     ac6:	82 30       	cpi	r24, 0x02	; 2
     ac8:	51 f4       	brne	.+20     	; 0xade <__mulsf3+0x60>
     aca:	04 c0       	rjmp	.+8      	; 0xad4 <__mulsf3+0x56>
     acc:	84 30       	cpi	r24, 0x04	; 4
     ace:	29 f4       	brne	.+10     	; 0xada <__mulsf3+0x5c>
     ad0:	92 30       	cpi	r25, 0x02	; 2
     ad2:	81 f4       	brne	.+32     	; 0xaf4 <__mulsf3+0x76>
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	92 e0       	ldi	r25, 0x02	; 2
     ad8:	c6 c0       	rjmp	.+396    	; 0xc66 <__mulsf3+0x1e8>
     ada:	92 30       	cpi	r25, 0x02	; 2
     adc:	49 f4       	brne	.+18     	; 0xaf0 <__mulsf3+0x72>
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ae2:	8a 89       	ldd	r24, Y+18	; 0x12
     ae4:	98 13       	cpse	r25, r24
     ae6:	21 e0       	ldi	r18, 0x01	; 1
     ae8:	2a 87       	std	Y+10, r18	; 0x0a
     aea:	ce 01       	movw	r24, r28
     aec:	09 96       	adiw	r24, 0x09	; 9
     aee:	bb c0       	rjmp	.+374    	; 0xc66 <__mulsf3+0x1e8>
     af0:	82 30       	cpi	r24, 0x02	; 2
     af2:	49 f4       	brne	.+18     	; 0xb06 <__mulsf3+0x88>
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	9a 85       	ldd	r25, Y+10	; 0x0a
     af8:	8a 89       	ldd	r24, Y+18	; 0x12
     afa:	98 13       	cpse	r25, r24
     afc:	21 e0       	ldi	r18, 0x01	; 1
     afe:	2a 8b       	std	Y+18, r18	; 0x12
     b00:	ce 01       	movw	r24, r28
     b02:	41 96       	adiw	r24, 0x11	; 17
     b04:	b0 c0       	rjmp	.+352    	; 0xc66 <__mulsf3+0x1e8>
     b06:	2d 84       	ldd	r2, Y+13	; 0x0d
     b08:	3e 84       	ldd	r3, Y+14	; 0x0e
     b0a:	4f 84       	ldd	r4, Y+15	; 0x0f
     b0c:	58 88       	ldd	r5, Y+16	; 0x10
     b0e:	6d 88       	ldd	r6, Y+21	; 0x15
     b10:	7e 88       	ldd	r7, Y+22	; 0x16
     b12:	8f 88       	ldd	r8, Y+23	; 0x17
     b14:	98 8c       	ldd	r9, Y+24	; 0x18
     b16:	ee 24       	eor	r14, r14
     b18:	ff 24       	eor	r15, r15
     b1a:	87 01       	movw	r16, r14
     b1c:	aa 24       	eor	r10, r10
     b1e:	bb 24       	eor	r11, r11
     b20:	65 01       	movw	r12, r10
     b22:	40 e0       	ldi	r20, 0x00	; 0
     b24:	50 e0       	ldi	r21, 0x00	; 0
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	e0 e0       	ldi	r30, 0x00	; 0
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	c1 01       	movw	r24, r2
     b30:	81 70       	andi	r24, 0x01	; 1
     b32:	90 70       	andi	r25, 0x00	; 0
     b34:	89 2b       	or	r24, r25
     b36:	e9 f0       	breq	.+58     	; 0xb72 <__mulsf3+0xf4>
     b38:	e6 0c       	add	r14, r6
     b3a:	f7 1c       	adc	r15, r7
     b3c:	08 1d       	adc	r16, r8
     b3e:	19 1d       	adc	r17, r9
     b40:	9a 01       	movw	r18, r20
     b42:	ab 01       	movw	r20, r22
     b44:	2a 0d       	add	r18, r10
     b46:	3b 1d       	adc	r19, r11
     b48:	4c 1d       	adc	r20, r12
     b4a:	5d 1d       	adc	r21, r13
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	a0 e0       	ldi	r26, 0x00	; 0
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	e6 14       	cp	r14, r6
     b56:	f7 04       	cpc	r15, r7
     b58:	08 05       	cpc	r16, r8
     b5a:	19 05       	cpc	r17, r9
     b5c:	20 f4       	brcc	.+8      	; 0xb66 <__mulsf3+0xe8>
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e0       	ldi	r26, 0x00	; 0
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	ba 01       	movw	r22, r20
     b68:	a9 01       	movw	r20, r18
     b6a:	48 0f       	add	r20, r24
     b6c:	59 1f       	adc	r21, r25
     b6e:	6a 1f       	adc	r22, r26
     b70:	7b 1f       	adc	r23, r27
     b72:	aa 0c       	add	r10, r10
     b74:	bb 1c       	adc	r11, r11
     b76:	cc 1c       	adc	r12, r12
     b78:	dd 1c       	adc	r13, r13
     b7a:	97 fe       	sbrs	r9, 7
     b7c:	08 c0       	rjmp	.+16     	; 0xb8e <__mulsf3+0x110>
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	a0 e0       	ldi	r26, 0x00	; 0
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	a8 2a       	or	r10, r24
     b88:	b9 2a       	or	r11, r25
     b8a:	ca 2a       	or	r12, r26
     b8c:	db 2a       	or	r13, r27
     b8e:	31 96       	adiw	r30, 0x01	; 1
     b90:	e0 32       	cpi	r30, 0x20	; 32
     b92:	f1 05       	cpc	r31, r1
     b94:	49 f0       	breq	.+18     	; 0xba8 <__mulsf3+0x12a>
     b96:	66 0c       	add	r6, r6
     b98:	77 1c       	adc	r7, r7
     b9a:	88 1c       	adc	r8, r8
     b9c:	99 1c       	adc	r9, r9
     b9e:	56 94       	lsr	r5
     ba0:	47 94       	ror	r4
     ba2:	37 94       	ror	r3
     ba4:	27 94       	ror	r2
     ba6:	c3 cf       	rjmp	.-122    	; 0xb2e <__mulsf3+0xb0>
     ba8:	fa 85       	ldd	r31, Y+10	; 0x0a
     baa:	ea 89       	ldd	r30, Y+18	; 0x12
     bac:	2b 89       	ldd	r18, Y+19	; 0x13
     bae:	3c 89       	ldd	r19, Y+20	; 0x14
     bb0:	8b 85       	ldd	r24, Y+11	; 0x0b
     bb2:	9c 85       	ldd	r25, Y+12	; 0x0c
     bb4:	28 0f       	add	r18, r24
     bb6:	39 1f       	adc	r19, r25
     bb8:	2e 5f       	subi	r18, 0xFE	; 254
     bba:	3f 4f       	sbci	r19, 0xFF	; 255
     bbc:	17 c0       	rjmp	.+46     	; 0xbec <__mulsf3+0x16e>
     bbe:	ca 01       	movw	r24, r20
     bc0:	81 70       	andi	r24, 0x01	; 1
     bc2:	90 70       	andi	r25, 0x00	; 0
     bc4:	89 2b       	or	r24, r25
     bc6:	61 f0       	breq	.+24     	; 0xbe0 <__mulsf3+0x162>
     bc8:	16 95       	lsr	r17
     bca:	07 95       	ror	r16
     bcc:	f7 94       	ror	r15
     bce:	e7 94       	ror	r14
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	a0 e0       	ldi	r26, 0x00	; 0
     bd6:	b0 e8       	ldi	r27, 0x80	; 128
     bd8:	e8 2a       	or	r14, r24
     bda:	f9 2a       	or	r15, r25
     bdc:	0a 2b       	or	r16, r26
     bde:	1b 2b       	or	r17, r27
     be0:	76 95       	lsr	r23
     be2:	67 95       	ror	r22
     be4:	57 95       	ror	r21
     be6:	47 95       	ror	r20
     be8:	2f 5f       	subi	r18, 0xFF	; 255
     bea:	3f 4f       	sbci	r19, 0xFF	; 255
     bec:	77 fd       	sbrc	r23, 7
     bee:	e7 cf       	rjmp	.-50     	; 0xbbe <__mulsf3+0x140>
     bf0:	0c c0       	rjmp	.+24     	; 0xc0a <__mulsf3+0x18c>
     bf2:	44 0f       	add	r20, r20
     bf4:	55 1f       	adc	r21, r21
     bf6:	66 1f       	adc	r22, r22
     bf8:	77 1f       	adc	r23, r23
     bfa:	17 fd       	sbrc	r17, 7
     bfc:	41 60       	ori	r20, 0x01	; 1
     bfe:	ee 0c       	add	r14, r14
     c00:	ff 1c       	adc	r15, r15
     c02:	00 1f       	adc	r16, r16
     c04:	11 1f       	adc	r17, r17
     c06:	21 50       	subi	r18, 0x01	; 1
     c08:	30 40       	sbci	r19, 0x00	; 0
     c0a:	40 30       	cpi	r20, 0x00	; 0
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	59 07       	cpc	r21, r25
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	69 07       	cpc	r22, r25
     c14:	90 e4       	ldi	r25, 0x40	; 64
     c16:	79 07       	cpc	r23, r25
     c18:	60 f3       	brcs	.-40     	; 0xbf2 <__mulsf3+0x174>
     c1a:	2b 8f       	std	Y+27, r18	; 0x1b
     c1c:	3c 8f       	std	Y+28, r19	; 0x1c
     c1e:	db 01       	movw	r26, r22
     c20:	ca 01       	movw	r24, r20
     c22:	8f 77       	andi	r24, 0x7F	; 127
     c24:	90 70       	andi	r25, 0x00	; 0
     c26:	a0 70       	andi	r26, 0x00	; 0
     c28:	b0 70       	andi	r27, 0x00	; 0
     c2a:	80 34       	cpi	r24, 0x40	; 64
     c2c:	91 05       	cpc	r25, r1
     c2e:	a1 05       	cpc	r26, r1
     c30:	b1 05       	cpc	r27, r1
     c32:	61 f4       	brne	.+24     	; 0xc4c <__mulsf3+0x1ce>
     c34:	47 fd       	sbrc	r20, 7
     c36:	0a c0       	rjmp	.+20     	; 0xc4c <__mulsf3+0x1ce>
     c38:	e1 14       	cp	r14, r1
     c3a:	f1 04       	cpc	r15, r1
     c3c:	01 05       	cpc	r16, r1
     c3e:	11 05       	cpc	r17, r1
     c40:	29 f0       	breq	.+10     	; 0xc4c <__mulsf3+0x1ce>
     c42:	40 5c       	subi	r20, 0xC0	; 192
     c44:	5f 4f       	sbci	r21, 0xFF	; 255
     c46:	6f 4f       	sbci	r22, 0xFF	; 255
     c48:	7f 4f       	sbci	r23, 0xFF	; 255
     c4a:	40 78       	andi	r20, 0x80	; 128
     c4c:	1a 8e       	std	Y+26, r1	; 0x1a
     c4e:	fe 17       	cp	r31, r30
     c50:	11 f0       	breq	.+4      	; 0xc56 <__mulsf3+0x1d8>
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	8a 8f       	std	Y+26, r24	; 0x1a
     c56:	4d 8f       	std	Y+29, r20	; 0x1d
     c58:	5e 8f       	std	Y+30, r21	; 0x1e
     c5a:	6f 8f       	std	Y+31, r22	; 0x1f
     c5c:	78 a3       	std	Y+32, r23	; 0x20
     c5e:	83 e0       	ldi	r24, 0x03	; 3
     c60:	89 8f       	std	Y+25, r24	; 0x19
     c62:	ce 01       	movw	r24, r28
     c64:	49 96       	adiw	r24, 0x19	; 25
     c66:	0e 94 5f 08 	call	0x10be	; 0x10be <__pack_f>
     c6a:	a0 96       	adiw	r28, 0x20	; 32
     c6c:	e2 e1       	ldi	r30, 0x12	; 18
     c6e:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__epilogue_restores__>

00000c72 <__divsf3>:
     c72:	a8 e1       	ldi	r26, 0x18	; 24
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	ef e3       	ldi	r30, 0x3F	; 63
     c78:	f6 e0       	ldi	r31, 0x06	; 6
     c7a:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__prologue_saves__+0x10>
     c7e:	69 83       	std	Y+1, r22	; 0x01
     c80:	7a 83       	std	Y+2, r23	; 0x02
     c82:	8b 83       	std	Y+3, r24	; 0x03
     c84:	9c 83       	std	Y+4, r25	; 0x04
     c86:	2d 83       	std	Y+5, r18	; 0x05
     c88:	3e 83       	std	Y+6, r19	; 0x06
     c8a:	4f 83       	std	Y+7, r20	; 0x07
     c8c:	58 87       	std	Y+8, r21	; 0x08
     c8e:	b9 e0       	ldi	r27, 0x09	; 9
     c90:	eb 2e       	mov	r14, r27
     c92:	f1 2c       	mov	r15, r1
     c94:	ec 0e       	add	r14, r28
     c96:	fd 1e       	adc	r15, r29
     c98:	ce 01       	movw	r24, r28
     c9a:	01 96       	adiw	r24, 0x01	; 1
     c9c:	b7 01       	movw	r22, r14
     c9e:	0e 94 34 09 	call	0x1268	; 0x1268 <__unpack_f>
     ca2:	8e 01       	movw	r16, r28
     ca4:	0f 5e       	subi	r16, 0xEF	; 239
     ca6:	1f 4f       	sbci	r17, 0xFF	; 255
     ca8:	ce 01       	movw	r24, r28
     caa:	05 96       	adiw	r24, 0x05	; 5
     cac:	b8 01       	movw	r22, r16
     cae:	0e 94 34 09 	call	0x1268	; 0x1268 <__unpack_f>
     cb2:	29 85       	ldd	r18, Y+9	; 0x09
     cb4:	22 30       	cpi	r18, 0x02	; 2
     cb6:	08 f4       	brcc	.+2      	; 0xcba <__divsf3+0x48>
     cb8:	7e c0       	rjmp	.+252    	; 0xdb6 <__divsf3+0x144>
     cba:	39 89       	ldd	r19, Y+17	; 0x11
     cbc:	32 30       	cpi	r19, 0x02	; 2
     cbe:	10 f4       	brcc	.+4      	; 0xcc4 <__divsf3+0x52>
     cc0:	b8 01       	movw	r22, r16
     cc2:	7c c0       	rjmp	.+248    	; 0xdbc <__divsf3+0x14a>
     cc4:	8a 85       	ldd	r24, Y+10	; 0x0a
     cc6:	9a 89       	ldd	r25, Y+18	; 0x12
     cc8:	89 27       	eor	r24, r25
     cca:	8a 87       	std	Y+10, r24	; 0x0a
     ccc:	24 30       	cpi	r18, 0x04	; 4
     cce:	11 f0       	breq	.+4      	; 0xcd4 <__divsf3+0x62>
     cd0:	22 30       	cpi	r18, 0x02	; 2
     cd2:	31 f4       	brne	.+12     	; 0xce0 <__divsf3+0x6e>
     cd4:	23 17       	cp	r18, r19
     cd6:	09 f0       	breq	.+2      	; 0xcda <__divsf3+0x68>
     cd8:	6e c0       	rjmp	.+220    	; 0xdb6 <__divsf3+0x144>
     cda:	61 e0       	ldi	r22, 0x01	; 1
     cdc:	72 e0       	ldi	r23, 0x02	; 2
     cde:	6e c0       	rjmp	.+220    	; 0xdbc <__divsf3+0x14a>
     ce0:	34 30       	cpi	r19, 0x04	; 4
     ce2:	39 f4       	brne	.+14     	; 0xcf2 <__divsf3+0x80>
     ce4:	1d 86       	std	Y+13, r1	; 0x0d
     ce6:	1e 86       	std	Y+14, r1	; 0x0e
     ce8:	1f 86       	std	Y+15, r1	; 0x0f
     cea:	18 8a       	std	Y+16, r1	; 0x10
     cec:	1c 86       	std	Y+12, r1	; 0x0c
     cee:	1b 86       	std	Y+11, r1	; 0x0b
     cf0:	04 c0       	rjmp	.+8      	; 0xcfa <__divsf3+0x88>
     cf2:	32 30       	cpi	r19, 0x02	; 2
     cf4:	21 f4       	brne	.+8      	; 0xcfe <__divsf3+0x8c>
     cf6:	84 e0       	ldi	r24, 0x04	; 4
     cf8:	89 87       	std	Y+9, r24	; 0x09
     cfa:	b7 01       	movw	r22, r14
     cfc:	5f c0       	rjmp	.+190    	; 0xdbc <__divsf3+0x14a>
     cfe:	2b 85       	ldd	r18, Y+11	; 0x0b
     d00:	3c 85       	ldd	r19, Y+12	; 0x0c
     d02:	8b 89       	ldd	r24, Y+19	; 0x13
     d04:	9c 89       	ldd	r25, Y+20	; 0x14
     d06:	28 1b       	sub	r18, r24
     d08:	39 0b       	sbc	r19, r25
     d0a:	3c 87       	std	Y+12, r19	; 0x0c
     d0c:	2b 87       	std	Y+11, r18	; 0x0b
     d0e:	ed 84       	ldd	r14, Y+13	; 0x0d
     d10:	fe 84       	ldd	r15, Y+14	; 0x0e
     d12:	0f 85       	ldd	r16, Y+15	; 0x0f
     d14:	18 89       	ldd	r17, Y+16	; 0x10
     d16:	ad 88       	ldd	r10, Y+21	; 0x15
     d18:	be 88       	ldd	r11, Y+22	; 0x16
     d1a:	cf 88       	ldd	r12, Y+23	; 0x17
     d1c:	d8 8c       	ldd	r13, Y+24	; 0x18
     d1e:	ea 14       	cp	r14, r10
     d20:	fb 04       	cpc	r15, r11
     d22:	0c 05       	cpc	r16, r12
     d24:	1d 05       	cpc	r17, r13
     d26:	40 f4       	brcc	.+16     	; 0xd38 <__divsf3+0xc6>
     d28:	ee 0c       	add	r14, r14
     d2a:	ff 1c       	adc	r15, r15
     d2c:	00 1f       	adc	r16, r16
     d2e:	11 1f       	adc	r17, r17
     d30:	21 50       	subi	r18, 0x01	; 1
     d32:	30 40       	sbci	r19, 0x00	; 0
     d34:	3c 87       	std	Y+12, r19	; 0x0c
     d36:	2b 87       	std	Y+11, r18	; 0x0b
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	40 e0       	ldi	r20, 0x00	; 0
     d3e:	50 e0       	ldi	r21, 0x00	; 0
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	a0 e0       	ldi	r26, 0x00	; 0
     d46:	b0 e4       	ldi	r27, 0x40	; 64
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	ea 14       	cp	r14, r10
     d4e:	fb 04       	cpc	r15, r11
     d50:	0c 05       	cpc	r16, r12
     d52:	1d 05       	cpc	r17, r13
     d54:	40 f0       	brcs	.+16     	; 0xd66 <__divsf3+0xf4>
     d56:	28 2b       	or	r18, r24
     d58:	39 2b       	or	r19, r25
     d5a:	4a 2b       	or	r20, r26
     d5c:	5b 2b       	or	r21, r27
     d5e:	ea 18       	sub	r14, r10
     d60:	fb 08       	sbc	r15, r11
     d62:	0c 09       	sbc	r16, r12
     d64:	1d 09       	sbc	r17, r13
     d66:	b6 95       	lsr	r27
     d68:	a7 95       	ror	r26
     d6a:	97 95       	ror	r25
     d6c:	87 95       	ror	r24
     d6e:	ee 0c       	add	r14, r14
     d70:	ff 1c       	adc	r15, r15
     d72:	00 1f       	adc	r16, r16
     d74:	11 1f       	adc	r17, r17
     d76:	6f 5f       	subi	r22, 0xFF	; 255
     d78:	7f 4f       	sbci	r23, 0xFF	; 255
     d7a:	6f 31       	cpi	r22, 0x1F	; 31
     d7c:	71 05       	cpc	r23, r1
     d7e:	31 f7       	brne	.-52     	; 0xd4c <__divsf3+0xda>
     d80:	da 01       	movw	r26, r20
     d82:	c9 01       	movw	r24, r18
     d84:	8f 77       	andi	r24, 0x7F	; 127
     d86:	90 70       	andi	r25, 0x00	; 0
     d88:	a0 70       	andi	r26, 0x00	; 0
     d8a:	b0 70       	andi	r27, 0x00	; 0
     d8c:	80 34       	cpi	r24, 0x40	; 64
     d8e:	91 05       	cpc	r25, r1
     d90:	a1 05       	cpc	r26, r1
     d92:	b1 05       	cpc	r27, r1
     d94:	61 f4       	brne	.+24     	; 0xdae <__divsf3+0x13c>
     d96:	27 fd       	sbrc	r18, 7
     d98:	0a c0       	rjmp	.+20     	; 0xdae <__divsf3+0x13c>
     d9a:	e1 14       	cp	r14, r1
     d9c:	f1 04       	cpc	r15, r1
     d9e:	01 05       	cpc	r16, r1
     da0:	11 05       	cpc	r17, r1
     da2:	29 f0       	breq	.+10     	; 0xdae <__divsf3+0x13c>
     da4:	20 5c       	subi	r18, 0xC0	; 192
     da6:	3f 4f       	sbci	r19, 0xFF	; 255
     da8:	4f 4f       	sbci	r20, 0xFF	; 255
     daa:	5f 4f       	sbci	r21, 0xFF	; 255
     dac:	20 78       	andi	r18, 0x80	; 128
     dae:	2d 87       	std	Y+13, r18	; 0x0d
     db0:	3e 87       	std	Y+14, r19	; 0x0e
     db2:	4f 87       	std	Y+15, r20	; 0x0f
     db4:	58 8b       	std	Y+16, r21	; 0x10
     db6:	be 01       	movw	r22, r28
     db8:	67 5f       	subi	r22, 0xF7	; 247
     dba:	7f 4f       	sbci	r23, 0xFF	; 255
     dbc:	cb 01       	movw	r24, r22
     dbe:	0e 94 5f 08 	call	0x10be	; 0x10be <__pack_f>
     dc2:	68 96       	adiw	r28, 0x18	; 24
     dc4:	ea e0       	ldi	r30, 0x0A	; 10
     dc6:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <__epilogue_restores__+0x10>

00000dca <__floatsisf>:
     dca:	a8 e0       	ldi	r26, 0x08	; 8
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	eb ee       	ldi	r30, 0xEB	; 235
     dd0:	f6 e0       	ldi	r31, 0x06	; 6
     dd2:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <__prologue_saves__+0x12>
     dd6:	9b 01       	movw	r18, r22
     dd8:	ac 01       	movw	r20, r24
     dda:	83 e0       	ldi	r24, 0x03	; 3
     ddc:	89 83       	std	Y+1, r24	; 0x01
     dde:	da 01       	movw	r26, r20
     de0:	c9 01       	movw	r24, r18
     de2:	88 27       	eor	r24, r24
     de4:	b7 fd       	sbrc	r27, 7
     de6:	83 95       	inc	r24
     de8:	99 27       	eor	r25, r25
     dea:	aa 27       	eor	r26, r26
     dec:	bb 27       	eor	r27, r27
     dee:	b8 2e       	mov	r11, r24
     df0:	21 15       	cp	r18, r1
     df2:	31 05       	cpc	r19, r1
     df4:	41 05       	cpc	r20, r1
     df6:	51 05       	cpc	r21, r1
     df8:	19 f4       	brne	.+6      	; 0xe00 <__floatsisf+0x36>
     dfa:	82 e0       	ldi	r24, 0x02	; 2
     dfc:	89 83       	std	Y+1, r24	; 0x01
     dfe:	3a c0       	rjmp	.+116    	; 0xe74 <__floatsisf+0xaa>
     e00:	88 23       	and	r24, r24
     e02:	a9 f0       	breq	.+42     	; 0xe2e <__floatsisf+0x64>
     e04:	20 30       	cpi	r18, 0x00	; 0
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	38 07       	cpc	r19, r24
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	48 07       	cpc	r20, r24
     e0e:	80 e8       	ldi	r24, 0x80	; 128
     e10:	58 07       	cpc	r21, r24
     e12:	29 f4       	brne	.+10     	; 0xe1e <__floatsisf+0x54>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	9f ec       	ldi	r25, 0xCF	; 207
     e1c:	30 c0       	rjmp	.+96     	; 0xe7e <__floatsisf+0xb4>
     e1e:	ee 24       	eor	r14, r14
     e20:	ff 24       	eor	r15, r15
     e22:	87 01       	movw	r16, r14
     e24:	e2 1a       	sub	r14, r18
     e26:	f3 0a       	sbc	r15, r19
     e28:	04 0b       	sbc	r16, r20
     e2a:	15 0b       	sbc	r17, r21
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <__floatsisf+0x68>
     e2e:	79 01       	movw	r14, r18
     e30:	8a 01       	movw	r16, r20
     e32:	8e e1       	ldi	r24, 0x1E	; 30
     e34:	c8 2e       	mov	r12, r24
     e36:	d1 2c       	mov	r13, r1
     e38:	dc 82       	std	Y+4, r13	; 0x04
     e3a:	cb 82       	std	Y+3, r12	; 0x03
     e3c:	ed 82       	std	Y+5, r14	; 0x05
     e3e:	fe 82       	std	Y+6, r15	; 0x06
     e40:	0f 83       	std	Y+7, r16	; 0x07
     e42:	18 87       	std	Y+8, r17	; 0x08
     e44:	c8 01       	movw	r24, r16
     e46:	b7 01       	movw	r22, r14
     e48:	0e 94 10 08 	call	0x1020	; 0x1020 <__clzsi2>
     e4c:	01 97       	sbiw	r24, 0x01	; 1
     e4e:	18 16       	cp	r1, r24
     e50:	19 06       	cpc	r1, r25
     e52:	84 f4       	brge	.+32     	; 0xe74 <__floatsisf+0xaa>
     e54:	08 2e       	mov	r0, r24
     e56:	04 c0       	rjmp	.+8      	; 0xe60 <__floatsisf+0x96>
     e58:	ee 0c       	add	r14, r14
     e5a:	ff 1c       	adc	r15, r15
     e5c:	00 1f       	adc	r16, r16
     e5e:	11 1f       	adc	r17, r17
     e60:	0a 94       	dec	r0
     e62:	d2 f7       	brpl	.-12     	; 0xe58 <__floatsisf+0x8e>
     e64:	ed 82       	std	Y+5, r14	; 0x05
     e66:	fe 82       	std	Y+6, r15	; 0x06
     e68:	0f 83       	std	Y+7, r16	; 0x07
     e6a:	18 87       	std	Y+8, r17	; 0x08
     e6c:	c8 1a       	sub	r12, r24
     e6e:	d9 0a       	sbc	r13, r25
     e70:	dc 82       	std	Y+4, r13	; 0x04
     e72:	cb 82       	std	Y+3, r12	; 0x03
     e74:	ba 82       	std	Y+2, r11	; 0x02
     e76:	ce 01       	movw	r24, r28
     e78:	01 96       	adiw	r24, 0x01	; 1
     e7a:	0e 94 5f 08 	call	0x10be	; 0x10be <__pack_f>
     e7e:	28 96       	adiw	r28, 0x08	; 8
     e80:	e9 e0       	ldi	r30, 0x09	; 9
     e82:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__epilogue_restores__+0x12>

00000e86 <__fixsfsi>:
     e86:	ac e0       	ldi	r26, 0x0C	; 12
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e9 e4       	ldi	r30, 0x49	; 73
     e8c:	f7 e0       	ldi	r31, 0x07	; 7
     e8e:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <__prologue_saves__+0x20>
     e92:	69 83       	std	Y+1, r22	; 0x01
     e94:	7a 83       	std	Y+2, r23	; 0x02
     e96:	8b 83       	std	Y+3, r24	; 0x03
     e98:	9c 83       	std	Y+4, r25	; 0x04
     e9a:	ce 01       	movw	r24, r28
     e9c:	01 96       	adiw	r24, 0x01	; 1
     e9e:	be 01       	movw	r22, r28
     ea0:	6b 5f       	subi	r22, 0xFB	; 251
     ea2:	7f 4f       	sbci	r23, 0xFF	; 255
     ea4:	0e 94 34 09 	call	0x1268	; 0x1268 <__unpack_f>
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	82 30       	cpi	r24, 0x02	; 2
     eac:	61 f1       	breq	.+88     	; 0xf06 <__fixsfsi+0x80>
     eae:	82 30       	cpi	r24, 0x02	; 2
     eb0:	50 f1       	brcs	.+84     	; 0xf06 <__fixsfsi+0x80>
     eb2:	84 30       	cpi	r24, 0x04	; 4
     eb4:	21 f4       	brne	.+8      	; 0xebe <__fixsfsi+0x38>
     eb6:	8e 81       	ldd	r24, Y+6	; 0x06
     eb8:	88 23       	and	r24, r24
     eba:	51 f1       	breq	.+84     	; 0xf10 <__fixsfsi+0x8a>
     ebc:	2e c0       	rjmp	.+92     	; 0xf1a <__fixsfsi+0x94>
     ebe:	2f 81       	ldd	r18, Y+7	; 0x07
     ec0:	38 85       	ldd	r19, Y+8	; 0x08
     ec2:	37 fd       	sbrc	r19, 7
     ec4:	20 c0       	rjmp	.+64     	; 0xf06 <__fixsfsi+0x80>
     ec6:	6e 81       	ldd	r22, Y+6	; 0x06
     ec8:	2f 31       	cpi	r18, 0x1F	; 31
     eca:	31 05       	cpc	r19, r1
     ecc:	1c f0       	brlt	.+6      	; 0xed4 <__fixsfsi+0x4e>
     ece:	66 23       	and	r22, r22
     ed0:	f9 f0       	breq	.+62     	; 0xf10 <__fixsfsi+0x8a>
     ed2:	23 c0       	rjmp	.+70     	; 0xf1a <__fixsfsi+0x94>
     ed4:	8e e1       	ldi	r24, 0x1E	; 30
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	82 1b       	sub	r24, r18
     eda:	93 0b       	sbc	r25, r19
     edc:	29 85       	ldd	r18, Y+9	; 0x09
     ede:	3a 85       	ldd	r19, Y+10	; 0x0a
     ee0:	4b 85       	ldd	r20, Y+11	; 0x0b
     ee2:	5c 85       	ldd	r21, Y+12	; 0x0c
     ee4:	04 c0       	rjmp	.+8      	; 0xeee <__fixsfsi+0x68>
     ee6:	56 95       	lsr	r21
     ee8:	47 95       	ror	r20
     eea:	37 95       	ror	r19
     eec:	27 95       	ror	r18
     eee:	8a 95       	dec	r24
     ef0:	d2 f7       	brpl	.-12     	; 0xee6 <__fixsfsi+0x60>
     ef2:	66 23       	and	r22, r22
     ef4:	b1 f0       	breq	.+44     	; 0xf22 <__fixsfsi+0x9c>
     ef6:	50 95       	com	r21
     ef8:	40 95       	com	r20
     efa:	30 95       	com	r19
     efc:	21 95       	neg	r18
     efe:	3f 4f       	sbci	r19, 0xFF	; 255
     f00:	4f 4f       	sbci	r20, 0xFF	; 255
     f02:	5f 4f       	sbci	r21, 0xFF	; 255
     f04:	0e c0       	rjmp	.+28     	; 0xf22 <__fixsfsi+0x9c>
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	40 e0       	ldi	r20, 0x00	; 0
     f0c:	50 e0       	ldi	r21, 0x00	; 0
     f0e:	09 c0       	rjmp	.+18     	; 0xf22 <__fixsfsi+0x9c>
     f10:	2f ef       	ldi	r18, 0xFF	; 255
     f12:	3f ef       	ldi	r19, 0xFF	; 255
     f14:	4f ef       	ldi	r20, 0xFF	; 255
     f16:	5f e7       	ldi	r21, 0x7F	; 127
     f18:	04 c0       	rjmp	.+8      	; 0xf22 <__fixsfsi+0x9c>
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	40 e0       	ldi	r20, 0x00	; 0
     f20:	50 e8       	ldi	r21, 0x80	; 128
     f22:	b9 01       	movw	r22, r18
     f24:	ca 01       	movw	r24, r20
     f26:	2c 96       	adiw	r28, 0x0c	; 12
     f28:	e2 e0       	ldi	r30, 0x02	; 2
     f2a:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <__epilogue_restores__+0x20>

00000f2e <__floatunsisf>:
     f2e:	a8 e0       	ldi	r26, 0x08	; 8
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	ed e9       	ldi	r30, 0x9D	; 157
     f34:	f7 e0       	ldi	r31, 0x07	; 7
     f36:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__prologue_saves__+0x10>
     f3a:	7b 01       	movw	r14, r22
     f3c:	8c 01       	movw	r16, r24
     f3e:	61 15       	cp	r22, r1
     f40:	71 05       	cpc	r23, r1
     f42:	81 05       	cpc	r24, r1
     f44:	91 05       	cpc	r25, r1
     f46:	19 f4       	brne	.+6      	; 0xf4e <__floatunsisf+0x20>
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	89 83       	std	Y+1, r24	; 0x01
     f4c:	60 c0       	rjmp	.+192    	; 0x100e <__floatunsisf+0xe0>
     f4e:	83 e0       	ldi	r24, 0x03	; 3
     f50:	89 83       	std	Y+1, r24	; 0x01
     f52:	8e e1       	ldi	r24, 0x1E	; 30
     f54:	c8 2e       	mov	r12, r24
     f56:	d1 2c       	mov	r13, r1
     f58:	dc 82       	std	Y+4, r13	; 0x04
     f5a:	cb 82       	std	Y+3, r12	; 0x03
     f5c:	ed 82       	std	Y+5, r14	; 0x05
     f5e:	fe 82       	std	Y+6, r15	; 0x06
     f60:	0f 83       	std	Y+7, r16	; 0x07
     f62:	18 87       	std	Y+8, r17	; 0x08
     f64:	c8 01       	movw	r24, r16
     f66:	b7 01       	movw	r22, r14
     f68:	0e 94 10 08 	call	0x1020	; 0x1020 <__clzsi2>
     f6c:	fc 01       	movw	r30, r24
     f6e:	31 97       	sbiw	r30, 0x01	; 1
     f70:	f7 ff       	sbrs	r31, 7
     f72:	3b c0       	rjmp	.+118    	; 0xfea <__floatunsisf+0xbc>
     f74:	22 27       	eor	r18, r18
     f76:	33 27       	eor	r19, r19
     f78:	2e 1b       	sub	r18, r30
     f7a:	3f 0b       	sbc	r19, r31
     f7c:	57 01       	movw	r10, r14
     f7e:	68 01       	movw	r12, r16
     f80:	02 2e       	mov	r0, r18
     f82:	04 c0       	rjmp	.+8      	; 0xf8c <__floatunsisf+0x5e>
     f84:	d6 94       	lsr	r13
     f86:	c7 94       	ror	r12
     f88:	b7 94       	ror	r11
     f8a:	a7 94       	ror	r10
     f8c:	0a 94       	dec	r0
     f8e:	d2 f7       	brpl	.-12     	; 0xf84 <__floatunsisf+0x56>
     f90:	40 e0       	ldi	r20, 0x00	; 0
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	a0 e0       	ldi	r26, 0x00	; 0
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	04 c0       	rjmp	.+8      	; 0xfaa <__floatunsisf+0x7c>
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	aa 1f       	adc	r26, r26
     fa8:	bb 1f       	adc	r27, r27
     faa:	2a 95       	dec	r18
     fac:	d2 f7       	brpl	.-12     	; 0xfa2 <__floatunsisf+0x74>
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	a1 09       	sbc	r26, r1
     fb2:	b1 09       	sbc	r27, r1
     fb4:	8e 21       	and	r24, r14
     fb6:	9f 21       	and	r25, r15
     fb8:	a0 23       	and	r26, r16
     fba:	b1 23       	and	r27, r17
     fbc:	00 97       	sbiw	r24, 0x00	; 0
     fbe:	a1 05       	cpc	r26, r1
     fc0:	b1 05       	cpc	r27, r1
     fc2:	21 f0       	breq	.+8      	; 0xfcc <__floatunsisf+0x9e>
     fc4:	41 e0       	ldi	r20, 0x01	; 1
     fc6:	50 e0       	ldi	r21, 0x00	; 0
     fc8:	60 e0       	ldi	r22, 0x00	; 0
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	4a 29       	or	r20, r10
     fce:	5b 29       	or	r21, r11
     fd0:	6c 29       	or	r22, r12
     fd2:	7d 29       	or	r23, r13
     fd4:	4d 83       	std	Y+5, r20	; 0x05
     fd6:	5e 83       	std	Y+6, r21	; 0x06
     fd8:	6f 83       	std	Y+7, r22	; 0x07
     fda:	78 87       	std	Y+8, r23	; 0x08
     fdc:	8e e1       	ldi	r24, 0x1E	; 30
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	8e 1b       	sub	r24, r30
     fe2:	9f 0b       	sbc	r25, r31
     fe4:	9c 83       	std	Y+4, r25	; 0x04
     fe6:	8b 83       	std	Y+3, r24	; 0x03
     fe8:	12 c0       	rjmp	.+36     	; 0x100e <__floatunsisf+0xe0>
     fea:	30 97       	sbiw	r30, 0x00	; 0
     fec:	81 f0       	breq	.+32     	; 0x100e <__floatunsisf+0xe0>
     fee:	0e 2e       	mov	r0, r30
     ff0:	04 c0       	rjmp	.+8      	; 0xffa <__floatunsisf+0xcc>
     ff2:	ee 0c       	add	r14, r14
     ff4:	ff 1c       	adc	r15, r15
     ff6:	00 1f       	adc	r16, r16
     ff8:	11 1f       	adc	r17, r17
     ffa:	0a 94       	dec	r0
     ffc:	d2 f7       	brpl	.-12     	; 0xff2 <__floatunsisf+0xc4>
     ffe:	ed 82       	std	Y+5, r14	; 0x05
    1000:	fe 82       	std	Y+6, r15	; 0x06
    1002:	0f 83       	std	Y+7, r16	; 0x07
    1004:	18 87       	std	Y+8, r17	; 0x08
    1006:	ce 1a       	sub	r12, r30
    1008:	df 0a       	sbc	r13, r31
    100a:	dc 82       	std	Y+4, r13	; 0x04
    100c:	cb 82       	std	Y+3, r12	; 0x03
    100e:	1a 82       	std	Y+2, r1	; 0x02
    1010:	ce 01       	movw	r24, r28
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	0e 94 5f 08 	call	0x10be	; 0x10be <__pack_f>
    1018:	28 96       	adiw	r28, 0x08	; 8
    101a:	ea e0       	ldi	r30, 0x0A	; 10
    101c:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <__epilogue_restores__+0x10>

00001020 <__clzsi2>:
    1020:	ef 92       	push	r14
    1022:	ff 92       	push	r15
    1024:	0f 93       	push	r16
    1026:	1f 93       	push	r17
    1028:	7b 01       	movw	r14, r22
    102a:	8c 01       	movw	r16, r24
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	e8 16       	cp	r14, r24
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	f8 06       	cpc	r15, r24
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	08 07       	cpc	r16, r24
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	18 07       	cpc	r17, r24
    103c:	88 f4       	brcc	.+34     	; 0x1060 <__clzsi2+0x40>
    103e:	8f ef       	ldi	r24, 0xFF	; 255
    1040:	e8 16       	cp	r14, r24
    1042:	f1 04       	cpc	r15, r1
    1044:	01 05       	cpc	r16, r1
    1046:	11 05       	cpc	r17, r1
    1048:	31 f0       	breq	.+12     	; 0x1056 <__clzsi2+0x36>
    104a:	28 f0       	brcs	.+10     	; 0x1056 <__clzsi2+0x36>
    104c:	88 e0       	ldi	r24, 0x08	; 8
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	a0 e0       	ldi	r26, 0x00	; 0
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	17 c0       	rjmp	.+46     	; 0x1084 <__clzsi2+0x64>
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	a0 e0       	ldi	r26, 0x00	; 0
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	12 c0       	rjmp	.+36     	; 0x1084 <__clzsi2+0x64>
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	e8 16       	cp	r14, r24
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	f8 06       	cpc	r15, r24
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	08 07       	cpc	r16, r24
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	18 07       	cpc	r17, r24
    1070:	28 f0       	brcs	.+10     	; 0x107c <__clzsi2+0x5c>
    1072:	88 e1       	ldi	r24, 0x18	; 24
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	a0 e0       	ldi	r26, 0x00	; 0
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	04 c0       	rjmp	.+8      	; 0x1084 <__clzsi2+0x64>
    107c:	80 e1       	ldi	r24, 0x10	; 16
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	a0 e0       	ldi	r26, 0x00	; 0
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	20 e2       	ldi	r18, 0x20	; 32
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	40 e0       	ldi	r20, 0x00	; 0
    108a:	50 e0       	ldi	r21, 0x00	; 0
    108c:	28 1b       	sub	r18, r24
    108e:	39 0b       	sbc	r19, r25
    1090:	4a 0b       	sbc	r20, r26
    1092:	5b 0b       	sbc	r21, r27
    1094:	04 c0       	rjmp	.+8      	; 0x109e <__clzsi2+0x7e>
    1096:	16 95       	lsr	r17
    1098:	07 95       	ror	r16
    109a:	f7 94       	ror	r15
    109c:	e7 94       	ror	r14
    109e:	8a 95       	dec	r24
    10a0:	d2 f7       	brpl	.-12     	; 0x1096 <__clzsi2+0x76>
    10a2:	f7 01       	movw	r30, r14
    10a4:	e7 5f       	subi	r30, 0xF7	; 247
    10a6:	fd 4f       	sbci	r31, 0xFD	; 253
    10a8:	80 81       	ld	r24, Z
    10aa:	28 1b       	sub	r18, r24
    10ac:	31 09       	sbc	r19, r1
    10ae:	41 09       	sbc	r20, r1
    10b0:	51 09       	sbc	r21, r1
    10b2:	c9 01       	movw	r24, r18
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
    10b8:	ff 90       	pop	r15
    10ba:	ef 90       	pop	r14
    10bc:	08 95       	ret

000010be <__pack_f>:
    10be:	df 92       	push	r13
    10c0:	ef 92       	push	r14
    10c2:	ff 92       	push	r15
    10c4:	0f 93       	push	r16
    10c6:	1f 93       	push	r17
    10c8:	fc 01       	movw	r30, r24
    10ca:	e4 80       	ldd	r14, Z+4	; 0x04
    10cc:	f5 80       	ldd	r15, Z+5	; 0x05
    10ce:	06 81       	ldd	r16, Z+6	; 0x06
    10d0:	17 81       	ldd	r17, Z+7	; 0x07
    10d2:	d1 80       	ldd	r13, Z+1	; 0x01
    10d4:	80 81       	ld	r24, Z
    10d6:	82 30       	cpi	r24, 0x02	; 2
    10d8:	48 f4       	brcc	.+18     	; 0x10ec <__pack_f+0x2e>
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	a0 e1       	ldi	r26, 0x10	; 16
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e8 2a       	or	r14, r24
    10e4:	f9 2a       	or	r15, r25
    10e6:	0a 2b       	or	r16, r26
    10e8:	1b 2b       	or	r17, r27
    10ea:	a5 c0       	rjmp	.+330    	; 0x1236 <__pack_f+0x178>
    10ec:	84 30       	cpi	r24, 0x04	; 4
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <__pack_f+0x34>
    10f0:	9f c0       	rjmp	.+318    	; 0x1230 <__pack_f+0x172>
    10f2:	82 30       	cpi	r24, 0x02	; 2
    10f4:	21 f4       	brne	.+8      	; 0x10fe <__pack_f+0x40>
    10f6:	ee 24       	eor	r14, r14
    10f8:	ff 24       	eor	r15, r15
    10fa:	87 01       	movw	r16, r14
    10fc:	05 c0       	rjmp	.+10     	; 0x1108 <__pack_f+0x4a>
    10fe:	e1 14       	cp	r14, r1
    1100:	f1 04       	cpc	r15, r1
    1102:	01 05       	cpc	r16, r1
    1104:	11 05       	cpc	r17, r1
    1106:	19 f4       	brne	.+6      	; 0x110e <__pack_f+0x50>
    1108:	e0 e0       	ldi	r30, 0x00	; 0
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	96 c0       	rjmp	.+300    	; 0x123a <__pack_f+0x17c>
    110e:	62 81       	ldd	r22, Z+2	; 0x02
    1110:	73 81       	ldd	r23, Z+3	; 0x03
    1112:	9f ef       	ldi	r25, 0xFF	; 255
    1114:	62 38       	cpi	r22, 0x82	; 130
    1116:	79 07       	cpc	r23, r25
    1118:	0c f0       	brlt	.+2      	; 0x111c <__pack_f+0x5e>
    111a:	5b c0       	rjmp	.+182    	; 0x11d2 <__pack_f+0x114>
    111c:	22 e8       	ldi	r18, 0x82	; 130
    111e:	3f ef       	ldi	r19, 0xFF	; 255
    1120:	26 1b       	sub	r18, r22
    1122:	37 0b       	sbc	r19, r23
    1124:	2a 31       	cpi	r18, 0x1A	; 26
    1126:	31 05       	cpc	r19, r1
    1128:	2c f0       	brlt	.+10     	; 0x1134 <__pack_f+0x76>
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	40 e0       	ldi	r20, 0x00	; 0
    1130:	50 e0       	ldi	r21, 0x00	; 0
    1132:	2a c0       	rjmp	.+84     	; 0x1188 <__pack_f+0xca>
    1134:	b8 01       	movw	r22, r16
    1136:	a7 01       	movw	r20, r14
    1138:	02 2e       	mov	r0, r18
    113a:	04 c0       	rjmp	.+8      	; 0x1144 <__pack_f+0x86>
    113c:	76 95       	lsr	r23
    113e:	67 95       	ror	r22
    1140:	57 95       	ror	r21
    1142:	47 95       	ror	r20
    1144:	0a 94       	dec	r0
    1146:	d2 f7       	brpl	.-12     	; 0x113c <__pack_f+0x7e>
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	a0 e0       	ldi	r26, 0x00	; 0
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	04 c0       	rjmp	.+8      	; 0x115a <__pack_f+0x9c>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	aa 1f       	adc	r26, r26
    1158:	bb 1f       	adc	r27, r27
    115a:	2a 95       	dec	r18
    115c:	d2 f7       	brpl	.-12     	; 0x1152 <__pack_f+0x94>
    115e:	01 97       	sbiw	r24, 0x01	; 1
    1160:	a1 09       	sbc	r26, r1
    1162:	b1 09       	sbc	r27, r1
    1164:	8e 21       	and	r24, r14
    1166:	9f 21       	and	r25, r15
    1168:	a0 23       	and	r26, r16
    116a:	b1 23       	and	r27, r17
    116c:	00 97       	sbiw	r24, 0x00	; 0
    116e:	a1 05       	cpc	r26, r1
    1170:	b1 05       	cpc	r27, r1
    1172:	21 f0       	breq	.+8      	; 0x117c <__pack_f+0xbe>
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	a0 e0       	ldi	r26, 0x00	; 0
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	9a 01       	movw	r18, r20
    117e:	ab 01       	movw	r20, r22
    1180:	28 2b       	or	r18, r24
    1182:	39 2b       	or	r19, r25
    1184:	4a 2b       	or	r20, r26
    1186:	5b 2b       	or	r21, r27
    1188:	da 01       	movw	r26, r20
    118a:	c9 01       	movw	r24, r18
    118c:	8f 77       	andi	r24, 0x7F	; 127
    118e:	90 70       	andi	r25, 0x00	; 0
    1190:	a0 70       	andi	r26, 0x00	; 0
    1192:	b0 70       	andi	r27, 0x00	; 0
    1194:	80 34       	cpi	r24, 0x40	; 64
    1196:	91 05       	cpc	r25, r1
    1198:	a1 05       	cpc	r26, r1
    119a:	b1 05       	cpc	r27, r1
    119c:	39 f4       	brne	.+14     	; 0x11ac <__pack_f+0xee>
    119e:	27 ff       	sbrs	r18, 7
    11a0:	09 c0       	rjmp	.+18     	; 0x11b4 <__pack_f+0xf6>
    11a2:	20 5c       	subi	r18, 0xC0	; 192
    11a4:	3f 4f       	sbci	r19, 0xFF	; 255
    11a6:	4f 4f       	sbci	r20, 0xFF	; 255
    11a8:	5f 4f       	sbci	r21, 0xFF	; 255
    11aa:	04 c0       	rjmp	.+8      	; 0x11b4 <__pack_f+0xf6>
    11ac:	21 5c       	subi	r18, 0xC1	; 193
    11ae:	3f 4f       	sbci	r19, 0xFF	; 255
    11b0:	4f 4f       	sbci	r20, 0xFF	; 255
    11b2:	5f 4f       	sbci	r21, 0xFF	; 255
    11b4:	e0 e0       	ldi	r30, 0x00	; 0
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	20 30       	cpi	r18, 0x00	; 0
    11ba:	a0 e0       	ldi	r26, 0x00	; 0
    11bc:	3a 07       	cpc	r19, r26
    11be:	a0 e0       	ldi	r26, 0x00	; 0
    11c0:	4a 07       	cpc	r20, r26
    11c2:	a0 e4       	ldi	r26, 0x40	; 64
    11c4:	5a 07       	cpc	r21, r26
    11c6:	10 f0       	brcs	.+4      	; 0x11cc <__pack_f+0x10e>
    11c8:	e1 e0       	ldi	r30, 0x01	; 1
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	79 01       	movw	r14, r18
    11ce:	8a 01       	movw	r16, r20
    11d0:	27 c0       	rjmp	.+78     	; 0x1220 <__pack_f+0x162>
    11d2:	60 38       	cpi	r22, 0x80	; 128
    11d4:	71 05       	cpc	r23, r1
    11d6:	64 f5       	brge	.+88     	; 0x1230 <__pack_f+0x172>
    11d8:	fb 01       	movw	r30, r22
    11da:	e1 58       	subi	r30, 0x81	; 129
    11dc:	ff 4f       	sbci	r31, 0xFF	; 255
    11de:	d8 01       	movw	r26, r16
    11e0:	c7 01       	movw	r24, r14
    11e2:	8f 77       	andi	r24, 0x7F	; 127
    11e4:	90 70       	andi	r25, 0x00	; 0
    11e6:	a0 70       	andi	r26, 0x00	; 0
    11e8:	b0 70       	andi	r27, 0x00	; 0
    11ea:	80 34       	cpi	r24, 0x40	; 64
    11ec:	91 05       	cpc	r25, r1
    11ee:	a1 05       	cpc	r26, r1
    11f0:	b1 05       	cpc	r27, r1
    11f2:	39 f4       	brne	.+14     	; 0x1202 <__pack_f+0x144>
    11f4:	e7 fe       	sbrs	r14, 7
    11f6:	0d c0       	rjmp	.+26     	; 0x1212 <__pack_f+0x154>
    11f8:	80 e4       	ldi	r24, 0x40	; 64
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	a0 e0       	ldi	r26, 0x00	; 0
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	04 c0       	rjmp	.+8      	; 0x120a <__pack_f+0x14c>
    1202:	8f e3       	ldi	r24, 0x3F	; 63
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	a0 e0       	ldi	r26, 0x00	; 0
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e8 0e       	add	r14, r24
    120c:	f9 1e       	adc	r15, r25
    120e:	0a 1f       	adc	r16, r26
    1210:	1b 1f       	adc	r17, r27
    1212:	17 ff       	sbrs	r17, 7
    1214:	05 c0       	rjmp	.+10     	; 0x1220 <__pack_f+0x162>
    1216:	16 95       	lsr	r17
    1218:	07 95       	ror	r16
    121a:	f7 94       	ror	r15
    121c:	e7 94       	ror	r14
    121e:	31 96       	adiw	r30, 0x01	; 1
    1220:	87 e0       	ldi	r24, 0x07	; 7
    1222:	16 95       	lsr	r17
    1224:	07 95       	ror	r16
    1226:	f7 94       	ror	r15
    1228:	e7 94       	ror	r14
    122a:	8a 95       	dec	r24
    122c:	d1 f7       	brne	.-12     	; 0x1222 <__pack_f+0x164>
    122e:	05 c0       	rjmp	.+10     	; 0x123a <__pack_f+0x17c>
    1230:	ee 24       	eor	r14, r14
    1232:	ff 24       	eor	r15, r15
    1234:	87 01       	movw	r16, r14
    1236:	ef ef       	ldi	r30, 0xFF	; 255
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	6e 2f       	mov	r22, r30
    123c:	67 95       	ror	r22
    123e:	66 27       	eor	r22, r22
    1240:	67 95       	ror	r22
    1242:	90 2f       	mov	r25, r16
    1244:	9f 77       	andi	r25, 0x7F	; 127
    1246:	d7 94       	ror	r13
    1248:	dd 24       	eor	r13, r13
    124a:	d7 94       	ror	r13
    124c:	8e 2f       	mov	r24, r30
    124e:	86 95       	lsr	r24
    1250:	49 2f       	mov	r20, r25
    1252:	46 2b       	or	r20, r22
    1254:	58 2f       	mov	r21, r24
    1256:	5d 29       	or	r21, r13
    1258:	b7 01       	movw	r22, r14
    125a:	ca 01       	movw	r24, r20
    125c:	1f 91       	pop	r17
    125e:	0f 91       	pop	r16
    1260:	ff 90       	pop	r15
    1262:	ef 90       	pop	r14
    1264:	df 90       	pop	r13
    1266:	08 95       	ret

00001268 <__unpack_f>:
    1268:	fc 01       	movw	r30, r24
    126a:	db 01       	movw	r26, r22
    126c:	40 81       	ld	r20, Z
    126e:	51 81       	ldd	r21, Z+1	; 0x01
    1270:	22 81       	ldd	r18, Z+2	; 0x02
    1272:	62 2f       	mov	r22, r18
    1274:	6f 77       	andi	r22, 0x7F	; 127
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	22 1f       	adc	r18, r18
    127a:	22 27       	eor	r18, r18
    127c:	22 1f       	adc	r18, r18
    127e:	93 81       	ldd	r25, Z+3	; 0x03
    1280:	89 2f       	mov	r24, r25
    1282:	88 0f       	add	r24, r24
    1284:	82 2b       	or	r24, r18
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	99 1f       	adc	r25, r25
    128c:	99 27       	eor	r25, r25
    128e:	99 1f       	adc	r25, r25
    1290:	11 96       	adiw	r26, 0x01	; 1
    1292:	9c 93       	st	X, r25
    1294:	11 97       	sbiw	r26, 0x01	; 1
    1296:	21 15       	cp	r18, r1
    1298:	31 05       	cpc	r19, r1
    129a:	a9 f5       	brne	.+106    	; 0x1306 <__unpack_f+0x9e>
    129c:	41 15       	cp	r20, r1
    129e:	51 05       	cpc	r21, r1
    12a0:	61 05       	cpc	r22, r1
    12a2:	71 05       	cpc	r23, r1
    12a4:	11 f4       	brne	.+4      	; 0x12aa <__unpack_f+0x42>
    12a6:	82 e0       	ldi	r24, 0x02	; 2
    12a8:	37 c0       	rjmp	.+110    	; 0x1318 <__unpack_f+0xb0>
    12aa:	82 e8       	ldi	r24, 0x82	; 130
    12ac:	9f ef       	ldi	r25, 0xFF	; 255
    12ae:	13 96       	adiw	r26, 0x03	; 3
    12b0:	9c 93       	st	X, r25
    12b2:	8e 93       	st	-X, r24
    12b4:	12 97       	sbiw	r26, 0x02	; 2
    12b6:	9a 01       	movw	r18, r20
    12b8:	ab 01       	movw	r20, r22
    12ba:	67 e0       	ldi	r22, 0x07	; 7
    12bc:	22 0f       	add	r18, r18
    12be:	33 1f       	adc	r19, r19
    12c0:	44 1f       	adc	r20, r20
    12c2:	55 1f       	adc	r21, r21
    12c4:	6a 95       	dec	r22
    12c6:	d1 f7       	brne	.-12     	; 0x12bc <__unpack_f+0x54>
    12c8:	83 e0       	ldi	r24, 0x03	; 3
    12ca:	8c 93       	st	X, r24
    12cc:	0d c0       	rjmp	.+26     	; 0x12e8 <__unpack_f+0x80>
    12ce:	22 0f       	add	r18, r18
    12d0:	33 1f       	adc	r19, r19
    12d2:	44 1f       	adc	r20, r20
    12d4:	55 1f       	adc	r21, r21
    12d6:	12 96       	adiw	r26, 0x02	; 2
    12d8:	8d 91       	ld	r24, X+
    12da:	9c 91       	ld	r25, X
    12dc:	13 97       	sbiw	r26, 0x03	; 3
    12de:	01 97       	sbiw	r24, 0x01	; 1
    12e0:	13 96       	adiw	r26, 0x03	; 3
    12e2:	9c 93       	st	X, r25
    12e4:	8e 93       	st	-X, r24
    12e6:	12 97       	sbiw	r26, 0x02	; 2
    12e8:	20 30       	cpi	r18, 0x00	; 0
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	38 07       	cpc	r19, r24
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	48 07       	cpc	r20, r24
    12f2:	80 e4       	ldi	r24, 0x40	; 64
    12f4:	58 07       	cpc	r21, r24
    12f6:	58 f3       	brcs	.-42     	; 0x12ce <__unpack_f+0x66>
    12f8:	14 96       	adiw	r26, 0x04	; 4
    12fa:	2d 93       	st	X+, r18
    12fc:	3d 93       	st	X+, r19
    12fe:	4d 93       	st	X+, r20
    1300:	5c 93       	st	X, r21
    1302:	17 97       	sbiw	r26, 0x07	; 7
    1304:	08 95       	ret
    1306:	2f 3f       	cpi	r18, 0xFF	; 255
    1308:	31 05       	cpc	r19, r1
    130a:	79 f4       	brne	.+30     	; 0x132a <__unpack_f+0xc2>
    130c:	41 15       	cp	r20, r1
    130e:	51 05       	cpc	r21, r1
    1310:	61 05       	cpc	r22, r1
    1312:	71 05       	cpc	r23, r1
    1314:	19 f4       	brne	.+6      	; 0x131c <__unpack_f+0xb4>
    1316:	84 e0       	ldi	r24, 0x04	; 4
    1318:	8c 93       	st	X, r24
    131a:	08 95       	ret
    131c:	64 ff       	sbrs	r22, 4
    131e:	03 c0       	rjmp	.+6      	; 0x1326 <__unpack_f+0xbe>
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	8c 93       	st	X, r24
    1324:	12 c0       	rjmp	.+36     	; 0x134a <__unpack_f+0xe2>
    1326:	1c 92       	st	X, r1
    1328:	10 c0       	rjmp	.+32     	; 0x134a <__unpack_f+0xe2>
    132a:	2f 57       	subi	r18, 0x7F	; 127
    132c:	30 40       	sbci	r19, 0x00	; 0
    132e:	13 96       	adiw	r26, 0x03	; 3
    1330:	3c 93       	st	X, r19
    1332:	2e 93       	st	-X, r18
    1334:	12 97       	sbiw	r26, 0x02	; 2
    1336:	83 e0       	ldi	r24, 0x03	; 3
    1338:	8c 93       	st	X, r24
    133a:	87 e0       	ldi	r24, 0x07	; 7
    133c:	44 0f       	add	r20, r20
    133e:	55 1f       	adc	r21, r21
    1340:	66 1f       	adc	r22, r22
    1342:	77 1f       	adc	r23, r23
    1344:	8a 95       	dec	r24
    1346:	d1 f7       	brne	.-12     	; 0x133c <__unpack_f+0xd4>
    1348:	70 64       	ori	r23, 0x40	; 64
    134a:	14 96       	adiw	r26, 0x04	; 4
    134c:	4d 93       	st	X+, r20
    134e:	5d 93       	st	X+, r21
    1350:	6d 93       	st	X+, r22
    1352:	7c 93       	st	X, r23
    1354:	17 97       	sbiw	r26, 0x07	; 7
    1356:	08 95       	ret

00001358 <__udivmodhi4>:
    1358:	aa 1b       	sub	r26, r26
    135a:	bb 1b       	sub	r27, r27
    135c:	51 e1       	ldi	r21, 0x11	; 17
    135e:	07 c0       	rjmp	.+14     	; 0x136e <__udivmodhi4_ep>

00001360 <__udivmodhi4_loop>:
    1360:	aa 1f       	adc	r26, r26
    1362:	bb 1f       	adc	r27, r27
    1364:	a6 17       	cp	r26, r22
    1366:	b7 07       	cpc	r27, r23
    1368:	10 f0       	brcs	.+4      	; 0x136e <__udivmodhi4_ep>
    136a:	a6 1b       	sub	r26, r22
    136c:	b7 0b       	sbc	r27, r23

0000136e <__udivmodhi4_ep>:
    136e:	88 1f       	adc	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	5a 95       	dec	r21
    1374:	a9 f7       	brne	.-22     	; 0x1360 <__udivmodhi4_loop>
    1376:	80 95       	com	r24
    1378:	90 95       	com	r25
    137a:	bc 01       	movw	r22, r24
    137c:	cd 01       	movw	r24, r26
    137e:	08 95       	ret

00001380 <__divmodhi4>:
    1380:	97 fb       	bst	r25, 7
    1382:	09 2e       	mov	r0, r25
    1384:	07 26       	eor	r0, r23
    1386:	0a d0       	rcall	.+20     	; 0x139c <__divmodhi4_neg1>
    1388:	77 fd       	sbrc	r23, 7
    138a:	04 d0       	rcall	.+8      	; 0x1394 <__divmodhi4_neg2>
    138c:	e5 df       	rcall	.-54     	; 0x1358 <__udivmodhi4>
    138e:	06 d0       	rcall	.+12     	; 0x139c <__divmodhi4_neg1>
    1390:	00 20       	and	r0, r0
    1392:	1a f4       	brpl	.+6      	; 0x139a <__divmodhi4_exit>

00001394 <__divmodhi4_neg2>:
    1394:	70 95       	com	r23
    1396:	61 95       	neg	r22
    1398:	7f 4f       	sbci	r23, 0xFF	; 255

0000139a <__divmodhi4_exit>:
    139a:	08 95       	ret

0000139c <__divmodhi4_neg1>:
    139c:	f6 f7       	brtc	.-4      	; 0x139a <__divmodhi4_exit>
    139e:	90 95       	com	r25
    13a0:	81 95       	neg	r24
    13a2:	9f 4f       	sbci	r25, 0xFF	; 255
    13a4:	08 95       	ret

000013a6 <__prologue_saves__>:
    13a6:	2f 92       	push	r2
    13a8:	3f 92       	push	r3
    13aa:	4f 92       	push	r4
    13ac:	5f 92       	push	r5
    13ae:	6f 92       	push	r6
    13b0:	7f 92       	push	r7
    13b2:	8f 92       	push	r8
    13b4:	9f 92       	push	r9
    13b6:	af 92       	push	r10
    13b8:	bf 92       	push	r11
    13ba:	cf 92       	push	r12
    13bc:	df 92       	push	r13
    13be:	ef 92       	push	r14
    13c0:	ff 92       	push	r15
    13c2:	0f 93       	push	r16
    13c4:	1f 93       	push	r17
    13c6:	cf 93       	push	r28
    13c8:	df 93       	push	r29
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	ca 1b       	sub	r28, r26
    13d0:	db 0b       	sbc	r29, r27
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	19 94       	eijmp

000013de <__epilogue_restores__>:
    13de:	2a 88       	ldd	r2, Y+18	; 0x12
    13e0:	39 88       	ldd	r3, Y+17	; 0x11
    13e2:	48 88       	ldd	r4, Y+16	; 0x10
    13e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    13e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    13e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    13ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    13ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    13ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    13f0:	b9 84       	ldd	r11, Y+9	; 0x09
    13f2:	c8 84       	ldd	r12, Y+8	; 0x08
    13f4:	df 80       	ldd	r13, Y+7	; 0x07
    13f6:	ee 80       	ldd	r14, Y+6	; 0x06
    13f8:	fd 80       	ldd	r15, Y+5	; 0x05
    13fa:	0c 81       	ldd	r16, Y+4	; 0x04
    13fc:	1b 81       	ldd	r17, Y+3	; 0x03
    13fe:	aa 81       	ldd	r26, Y+2	; 0x02
    1400:	b9 81       	ldd	r27, Y+1	; 0x01
    1402:	ce 0f       	add	r28, r30
    1404:	d1 1d       	adc	r29, r1
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	ed 01       	movw	r28, r26
    1412:	08 95       	ret

00001414 <pow>:
    1414:	fa 01       	movw	r30, r20
    1416:	ee 0f       	add	r30, r30
    1418:	ff 1f       	adc	r31, r31
    141a:	30 96       	adiw	r30, 0x00	; 0
    141c:	21 05       	cpc	r18, r1
    141e:	31 05       	cpc	r19, r1
    1420:	99 f1       	breq	.+102    	; 0x1488 <pow+0x74>
    1422:	61 15       	cp	r22, r1
    1424:	71 05       	cpc	r23, r1
    1426:	61 f4       	brne	.+24     	; 0x1440 <pow+0x2c>
    1428:	80 38       	cpi	r24, 0x80	; 128
    142a:	bf e3       	ldi	r27, 0x3F	; 63
    142c:	9b 07       	cpc	r25, r27
    142e:	49 f1       	breq	.+82     	; 0x1482 <pow+0x6e>
    1430:	68 94       	set
    1432:	90 38       	cpi	r25, 0x80	; 128
    1434:	81 05       	cpc	r24, r1
    1436:	61 f0       	breq	.+24     	; 0x1450 <pow+0x3c>
    1438:	80 38       	cpi	r24, 0x80	; 128
    143a:	bf ef       	ldi	r27, 0xFF	; 255
    143c:	9b 07       	cpc	r25, r27
    143e:	41 f0       	breq	.+16     	; 0x1450 <pow+0x3c>
    1440:	99 23       	and	r25, r25
    1442:	42 f5       	brpl	.+80     	; 0x1494 <pow+0x80>
    1444:	ff 3f       	cpi	r31, 0xFF	; 255
    1446:	e1 05       	cpc	r30, r1
    1448:	31 05       	cpc	r19, r1
    144a:	21 05       	cpc	r18, r1
    144c:	11 f1       	breq	.+68     	; 0x1492 <pow+0x7e>
    144e:	e8 94       	clt
    1450:	08 94       	sec
    1452:	e7 95       	ror	r30
    1454:	d9 01       	movw	r26, r18
    1456:	aa 23       	and	r26, r26
    1458:	29 f4       	brne	.+10     	; 0x1464 <pow+0x50>
    145a:	ab 2f       	mov	r26, r27
    145c:	be 2f       	mov	r27, r30
    145e:	f8 5f       	subi	r31, 0xF8	; 248
    1460:	d0 f3       	brcs	.-12     	; 0x1456 <pow+0x42>
    1462:	10 c0       	rjmp	.+32     	; 0x1484 <pow+0x70>
    1464:	ff 5f       	subi	r31, 0xFF	; 255
    1466:	70 f4       	brcc	.+28     	; 0x1484 <pow+0x70>
    1468:	a6 95       	lsr	r26
    146a:	e0 f7       	brcc	.-8      	; 0x1464 <pow+0x50>
    146c:	f7 39       	cpi	r31, 0x97	; 151
    146e:	50 f0       	brcs	.+20     	; 0x1484 <pow+0x70>
    1470:	19 f0       	breq	.+6      	; 0x1478 <pow+0x64>
    1472:	ff 3a       	cpi	r31, 0xAF	; 175
    1474:	38 f4       	brcc	.+14     	; 0x1484 <pow+0x70>
    1476:	9f 77       	andi	r25, 0x7F	; 127
    1478:	9f 93       	push	r25
    147a:	0c d0       	rcall	.+24     	; 0x1494 <pow+0x80>
    147c:	0f 90       	pop	r0
    147e:	07 fc       	sbrc	r0, 7
    1480:	90 58       	subi	r25, 0x80	; 128
    1482:	08 95       	ret
    1484:	3e f0       	brts	.+14     	; 0x1494 <pow+0x80>
    1486:	49 c0       	rjmp	.+146    	; 0x151a <__fp_nan>
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	70 e0       	ldi	r23, 0x00	; 0
    148c:	80 e8       	ldi	r24, 0x80	; 128
    148e:	9f e3       	ldi	r25, 0x3F	; 63
    1490:	08 95       	ret
    1492:	4f e7       	ldi	r20, 0x7F	; 127
    1494:	9f 77       	andi	r25, 0x7F	; 127
    1496:	5f 93       	push	r21
    1498:	4f 93       	push	r20
    149a:	3f 93       	push	r19
    149c:	2f 93       	push	r18
    149e:	d0 d0       	rcall	.+416    	; 0x1640 <log>
    14a0:	2f 91       	pop	r18
    14a2:	3f 91       	pop	r19
    14a4:	4f 91       	pop	r20
    14a6:	5f 91       	pop	r21
    14a8:	ea da       	rcall	.-2604   	; 0xa7e <__mulsf3>
    14aa:	05 c0       	rjmp	.+10     	; 0x14b6 <exp>
    14ac:	19 f4       	brne	.+6      	; 0x14b4 <pow+0xa0>
    14ae:	0e f0       	brts	.+2      	; 0x14b2 <pow+0x9e>
    14b0:	2e c0       	rjmp	.+92     	; 0x150e <__fp_inf>
    14b2:	7d c0       	rjmp	.+250    	; 0x15ae <__fp_zero>
    14b4:	32 c0       	rjmp	.+100    	; 0x151a <__fp_nan>

000014b6 <exp>:
    14b6:	61 d0       	rcall	.+194    	; 0x157a <__fp_splitA>
    14b8:	c8 f3       	brcs	.-14     	; 0x14ac <pow+0x98>
    14ba:	96 38       	cpi	r25, 0x86	; 134
    14bc:	c0 f7       	brcc	.-16     	; 0x14ae <pow+0x9a>
    14be:	07 f8       	bld	r0, 7
    14c0:	0f 92       	push	r0
    14c2:	e8 94       	clt
    14c4:	2b e3       	ldi	r18, 0x3B	; 59
    14c6:	3a ea       	ldi	r19, 0xAA	; 170
    14c8:	48 eb       	ldi	r20, 0xB8	; 184
    14ca:	5f e7       	ldi	r21, 0x7F	; 127
    14cc:	38 d1       	rcall	.+624    	; 0x173e <__mulsf3_pse>
    14ce:	0f 92       	push	r0
    14d0:	0f 92       	push	r0
    14d2:	0f 92       	push	r0
    14d4:	4d b7       	in	r20, 0x3d	; 61
    14d6:	5e b7       	in	r21, 0x3e	; 62
    14d8:	0f 92       	push	r0
    14da:	f2 d0       	rcall	.+484    	; 0x16c0 <modf>
    14dc:	e4 ee       	ldi	r30, 0xE4	; 228
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	1f d0       	rcall	.+62     	; 0x1520 <__fp_powser>
    14e2:	4f 91       	pop	r20
    14e4:	5f 91       	pop	r21
    14e6:	ef 91       	pop	r30
    14e8:	ff 91       	pop	r31
    14ea:	e5 95       	asr	r30
    14ec:	ee 1f       	adc	r30, r30
    14ee:	ff 1f       	adc	r31, r31
    14f0:	49 f0       	breq	.+18     	; 0x1504 <exp+0x4e>
    14f2:	fe 57       	subi	r31, 0x7E	; 126
    14f4:	e0 68       	ori	r30, 0x80	; 128
    14f6:	44 27       	eor	r20, r20
    14f8:	ee 0f       	add	r30, r30
    14fa:	44 1f       	adc	r20, r20
    14fc:	fa 95       	dec	r31
    14fe:	e1 f7       	brne	.-8      	; 0x14f8 <exp+0x42>
    1500:	41 95       	neg	r20
    1502:	55 0b       	sbc	r21, r21
    1504:	64 d0       	rcall	.+200    	; 0x15ce <ldexp>
    1506:	0f 90       	pop	r0
    1508:	07 fe       	sbrs	r0, 7
    150a:	58 c0       	rjmp	.+176    	; 0x15bc <inverse>
    150c:	08 95       	ret

0000150e <__fp_inf>:
    150e:	97 f9       	bld	r25, 7
    1510:	9f 67       	ori	r25, 0x7F	; 127
    1512:	80 e8       	ldi	r24, 0x80	; 128
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	08 95       	ret

0000151a <__fp_nan>:
    151a:	9f ef       	ldi	r25, 0xFF	; 255
    151c:	80 ec       	ldi	r24, 0xC0	; 192
    151e:	08 95       	ret

00001520 <__fp_powser>:
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	1f 93       	push	r17
    1526:	0f 93       	push	r16
    1528:	ff 92       	push	r15
    152a:	ef 92       	push	r14
    152c:	df 92       	push	r13
    152e:	7b 01       	movw	r14, r22
    1530:	8c 01       	movw	r16, r24
    1532:	68 94       	set
    1534:	05 c0       	rjmp	.+10     	; 0x1540 <__fp_powser+0x20>
    1536:	da 2e       	mov	r13, r26
    1538:	ef 01       	movw	r28, r30
    153a:	ff d0       	rcall	.+510    	; 0x173a <__mulsf3x>
    153c:	fe 01       	movw	r30, r28
    153e:	e8 94       	clt
    1540:	a5 91       	lpm	r26, Z+
    1542:	25 91       	lpm	r18, Z+
    1544:	35 91       	lpm	r19, Z+
    1546:	45 91       	lpm	r20, Z+
    1548:	55 91       	lpm	r21, Z+
    154a:	ae f3       	brts	.-22     	; 0x1536 <__fp_powser+0x16>
    154c:	ef 01       	movw	r28, r30
    154e:	5e d1       	rcall	.+700    	; 0x180c <__addsf3x>
    1550:	fe 01       	movw	r30, r28
    1552:	97 01       	movw	r18, r14
    1554:	a8 01       	movw	r20, r16
    1556:	da 94       	dec	r13
    1558:	79 f7       	brne	.-34     	; 0x1538 <__fp_powser+0x18>
    155a:	df 90       	pop	r13
    155c:	ef 90       	pop	r14
    155e:	ff 90       	pop	r15
    1560:	0f 91       	pop	r16
    1562:	1f 91       	pop	r17
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <__fp_split3>:
    156a:	57 fd       	sbrc	r21, 7
    156c:	90 58       	subi	r25, 0x80	; 128
    156e:	44 0f       	add	r20, r20
    1570:	55 1f       	adc	r21, r21
    1572:	59 f0       	breq	.+22     	; 0x158a <__fp_splitA+0x10>
    1574:	5f 3f       	cpi	r21, 0xFF	; 255
    1576:	71 f0       	breq	.+28     	; 0x1594 <__fp_splitA+0x1a>
    1578:	47 95       	ror	r20

0000157a <__fp_splitA>:
    157a:	88 0f       	add	r24, r24
    157c:	97 fb       	bst	r25, 7
    157e:	99 1f       	adc	r25, r25
    1580:	61 f0       	breq	.+24     	; 0x159a <__fp_splitA+0x20>
    1582:	9f 3f       	cpi	r25, 0xFF	; 255
    1584:	79 f0       	breq	.+30     	; 0x15a4 <__fp_splitA+0x2a>
    1586:	87 95       	ror	r24
    1588:	08 95       	ret
    158a:	12 16       	cp	r1, r18
    158c:	13 06       	cpc	r1, r19
    158e:	14 06       	cpc	r1, r20
    1590:	55 1f       	adc	r21, r21
    1592:	f2 cf       	rjmp	.-28     	; 0x1578 <__fp_split3+0xe>
    1594:	46 95       	lsr	r20
    1596:	f1 df       	rcall	.-30     	; 0x157a <__fp_splitA>
    1598:	08 c0       	rjmp	.+16     	; 0x15aa <__fp_splitA+0x30>
    159a:	16 16       	cp	r1, r22
    159c:	17 06       	cpc	r1, r23
    159e:	18 06       	cpc	r1, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	f1 cf       	rjmp	.-30     	; 0x1586 <__fp_splitA+0xc>
    15a4:	86 95       	lsr	r24
    15a6:	71 05       	cpc	r23, r1
    15a8:	61 05       	cpc	r22, r1
    15aa:	08 94       	sec
    15ac:	08 95       	ret

000015ae <__fp_zero>:
    15ae:	e8 94       	clt

000015b0 <__fp_szero>:
    15b0:	bb 27       	eor	r27, r27
    15b2:	66 27       	eor	r22, r22
    15b4:	77 27       	eor	r23, r23
    15b6:	cb 01       	movw	r24, r22
    15b8:	97 f9       	bld	r25, 7
    15ba:	08 95       	ret

000015bc <inverse>:
    15bc:	9b 01       	movw	r18, r22
    15be:	ac 01       	movw	r20, r24
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	70 e0       	ldi	r23, 0x00	; 0
    15c4:	80 e8       	ldi	r24, 0x80	; 128
    15c6:	9f e3       	ldi	r25, 0x3F	; 63
    15c8:	54 cb       	rjmp	.-2392   	; 0xc72 <__divsf3>
    15ca:	a1 cf       	rjmp	.-190    	; 0x150e <__fp_inf>
    15cc:	72 c1       	rjmp	.+740    	; 0x18b2 <__fp_mpack>

000015ce <ldexp>:
    15ce:	d5 df       	rcall	.-86     	; 0x157a <__fp_splitA>
    15d0:	e8 f3       	brcs	.-6      	; 0x15cc <inverse+0x10>
    15d2:	99 23       	and	r25, r25
    15d4:	d9 f3       	breq	.-10     	; 0x15cc <inverse+0x10>
    15d6:	94 0f       	add	r25, r20
    15d8:	51 1d       	adc	r21, r1
    15da:	bb f3       	brvs	.-18     	; 0x15ca <inverse+0xe>
    15dc:	91 50       	subi	r25, 0x01	; 1
    15de:	50 40       	sbci	r21, 0x00	; 0
    15e0:	94 f0       	brlt	.+36     	; 0x1606 <ldexp+0x38>
    15e2:	59 f0       	breq	.+22     	; 0x15fa <ldexp+0x2c>
    15e4:	88 23       	and	r24, r24
    15e6:	32 f0       	brmi	.+12     	; 0x15f4 <ldexp+0x26>
    15e8:	66 0f       	add	r22, r22
    15ea:	77 1f       	adc	r23, r23
    15ec:	88 1f       	adc	r24, r24
    15ee:	91 50       	subi	r25, 0x01	; 1
    15f0:	50 40       	sbci	r21, 0x00	; 0
    15f2:	c1 f7       	brne	.-16     	; 0x15e4 <ldexp+0x16>
    15f4:	9e 3f       	cpi	r25, 0xFE	; 254
    15f6:	51 05       	cpc	r21, r1
    15f8:	44 f7       	brge	.-48     	; 0x15ca <inverse+0xe>
    15fa:	88 0f       	add	r24, r24
    15fc:	91 1d       	adc	r25, r1
    15fe:	96 95       	lsr	r25
    1600:	87 95       	ror	r24
    1602:	97 f9       	bld	r25, 7
    1604:	08 95       	ret
    1606:	5f 3f       	cpi	r21, 0xFF	; 255
    1608:	ac f0       	brlt	.+42     	; 0x1634 <ldexp+0x66>
    160a:	98 3e       	cpi	r25, 0xE8	; 232
    160c:	9c f0       	brlt	.+38     	; 0x1634 <ldexp+0x66>
    160e:	bb 27       	eor	r27, r27
    1610:	86 95       	lsr	r24
    1612:	77 95       	ror	r23
    1614:	67 95       	ror	r22
    1616:	b7 95       	ror	r27
    1618:	08 f4       	brcc	.+2      	; 0x161c <ldexp+0x4e>
    161a:	b1 60       	ori	r27, 0x01	; 1
    161c:	93 95       	inc	r25
    161e:	c1 f7       	brne	.-16     	; 0x1610 <ldexp+0x42>
    1620:	bb 0f       	add	r27, r27
    1622:	58 f7       	brcc	.-42     	; 0x15fa <ldexp+0x2c>
    1624:	11 f4       	brne	.+4      	; 0x162a <ldexp+0x5c>
    1626:	60 ff       	sbrs	r22, 0
    1628:	e8 cf       	rjmp	.-48     	; 0x15fa <ldexp+0x2c>
    162a:	6f 5f       	subi	r22, 0xFF	; 255
    162c:	7f 4f       	sbci	r23, 0xFF	; 255
    162e:	8f 4f       	sbci	r24, 0xFF	; 255
    1630:	9f 4f       	sbci	r25, 0xFF	; 255
    1632:	e3 cf       	rjmp	.-58     	; 0x15fa <ldexp+0x2c>
    1634:	bd cf       	rjmp	.-134    	; 0x15b0 <__fp_szero>
    1636:	0e f0       	brts	.+2      	; 0x163a <ldexp+0x6c>
    1638:	3c c1       	rjmp	.+632    	; 0x18b2 <__fp_mpack>
    163a:	6f cf       	rjmp	.-290    	; 0x151a <__fp_nan>
    163c:	68 94       	set
    163e:	67 cf       	rjmp	.-306    	; 0x150e <__fp_inf>

00001640 <log>:
    1640:	9c df       	rcall	.-200    	; 0x157a <__fp_splitA>
    1642:	c8 f3       	brcs	.-14     	; 0x1636 <ldexp+0x68>
    1644:	99 23       	and	r25, r25
    1646:	d1 f3       	breq	.-12     	; 0x163c <ldexp+0x6e>
    1648:	c6 f3       	brts	.-16     	; 0x163a <ldexp+0x6c>
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	1f 93       	push	r17
    1650:	0f 93       	push	r16
    1652:	ff 92       	push	r15
    1654:	c9 2f       	mov	r28, r25
    1656:	dd 27       	eor	r29, r29
    1658:	88 23       	and	r24, r24
    165a:	2a f0       	brmi	.+10     	; 0x1666 <log+0x26>
    165c:	21 97       	sbiw	r28, 0x01	; 1
    165e:	66 0f       	add	r22, r22
    1660:	77 1f       	adc	r23, r23
    1662:	88 1f       	adc	r24, r24
    1664:	da f7       	brpl	.-10     	; 0x165c <log+0x1c>
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	40 e8       	ldi	r20, 0x80	; 128
    166c:	5f eb       	ldi	r21, 0xBF	; 191
    166e:	9f e3       	ldi	r25, 0x3F	; 63
    1670:	88 39       	cpi	r24, 0x98	; 152
    1672:	20 f0       	brcs	.+8      	; 0x167c <log+0x3c>
    1674:	80 3e       	cpi	r24, 0xE0	; 224
    1676:	30 f0       	brcs	.+12     	; 0x1684 <log+0x44>
    1678:	21 96       	adiw	r28, 0x01	; 1
    167a:	8f 77       	andi	r24, 0x7F	; 127
    167c:	b6 d0       	rcall	.+364    	; 0x17ea <__addsf3>
    167e:	ec e0       	ldi	r30, 0x0C	; 12
    1680:	f1 e0       	ldi	r31, 0x01	; 1
    1682:	03 c0       	rjmp	.+6      	; 0x168a <log+0x4a>
    1684:	b2 d0       	rcall	.+356    	; 0x17ea <__addsf3>
    1686:	e9 e3       	ldi	r30, 0x39	; 57
    1688:	f1 e0       	ldi	r31, 0x01	; 1
    168a:	4a df       	rcall	.-364    	; 0x1520 <__fp_powser>
    168c:	8b 01       	movw	r16, r22
    168e:	be 01       	movw	r22, r28
    1690:	ec 01       	movw	r28, r24
    1692:	fb 2e       	mov	r15, r27
    1694:	6f 57       	subi	r22, 0x7F	; 127
    1696:	71 09       	sbc	r23, r1
    1698:	75 95       	asr	r23
    169a:	77 1f       	adc	r23, r23
    169c:	88 0b       	sbc	r24, r24
    169e:	99 0b       	sbc	r25, r25
    16a0:	94 db       	rcall	.-2264   	; 0xdca <__floatsisf>
    16a2:	28 e1       	ldi	r18, 0x18	; 24
    16a4:	32 e7       	ldi	r19, 0x72	; 114
    16a6:	41 e3       	ldi	r20, 0x31	; 49
    16a8:	5f e3       	ldi	r21, 0x3F	; 63
    16aa:	47 d0       	rcall	.+142    	; 0x173a <__mulsf3x>
    16ac:	af 2d       	mov	r26, r15
    16ae:	98 01       	movw	r18, r16
    16b0:	ae 01       	movw	r20, r28
    16b2:	ff 90       	pop	r15
    16b4:	0f 91       	pop	r16
    16b6:	1f 91       	pop	r17
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	a7 d0       	rcall	.+334    	; 0x180c <__addsf3x>
    16be:	15 c1       	rjmp	.+554    	; 0x18ea <__fp_round>

000016c0 <modf>:
    16c0:	fa 01       	movw	r30, r20
    16c2:	dc 01       	movw	r26, r24
    16c4:	aa 0f       	add	r26, r26
    16c6:	bb 1f       	adc	r27, r27
    16c8:	9b 01       	movw	r18, r22
    16ca:	ac 01       	movw	r20, r24
    16cc:	bf 57       	subi	r27, 0x7F	; 127
    16ce:	28 f4       	brcc	.+10     	; 0x16da <modf+0x1a>
    16d0:	22 27       	eor	r18, r18
    16d2:	33 27       	eor	r19, r19
    16d4:	44 27       	eor	r20, r20
    16d6:	50 78       	andi	r21, 0x80	; 128
    16d8:	1f c0       	rjmp	.+62     	; 0x1718 <modf+0x58>
    16da:	b7 51       	subi	r27, 0x17	; 23
    16dc:	88 f4       	brcc	.+34     	; 0x1700 <modf+0x40>
    16de:	ab 2f       	mov	r26, r27
    16e0:	00 24       	eor	r0, r0
    16e2:	46 95       	lsr	r20
    16e4:	37 95       	ror	r19
    16e6:	27 95       	ror	r18
    16e8:	01 1c       	adc	r0, r1
    16ea:	a3 95       	inc	r26
    16ec:	d2 f3       	brmi	.-12     	; 0x16e2 <modf+0x22>
    16ee:	00 20       	and	r0, r0
    16f0:	69 f0       	breq	.+26     	; 0x170c <modf+0x4c>
    16f2:	22 0f       	add	r18, r18
    16f4:	33 1f       	adc	r19, r19
    16f6:	44 1f       	adc	r20, r20
    16f8:	b3 95       	inc	r27
    16fa:	da f3       	brmi	.-10     	; 0x16f2 <modf+0x32>
    16fc:	0d d0       	rcall	.+26     	; 0x1718 <modf+0x58>
    16fe:	74 c0       	rjmp	.+232    	; 0x17e8 <__subsf3>
    1700:	61 30       	cpi	r22, 0x01	; 1
    1702:	71 05       	cpc	r23, r1
    1704:	a0 e8       	ldi	r26, 0x80	; 128
    1706:	8a 07       	cpc	r24, r26
    1708:	b9 46       	sbci	r27, 0x69	; 105
    170a:	30 f4       	brcc	.+12     	; 0x1718 <modf+0x58>
    170c:	9b 01       	movw	r18, r22
    170e:	ac 01       	movw	r20, r24
    1710:	66 27       	eor	r22, r22
    1712:	77 27       	eor	r23, r23
    1714:	88 27       	eor	r24, r24
    1716:	90 78       	andi	r25, 0x80	; 128
    1718:	30 96       	adiw	r30, 0x00	; 0
    171a:	21 f0       	breq	.+8      	; 0x1724 <modf+0x64>
    171c:	20 83       	st	Z, r18
    171e:	31 83       	std	Z+1, r19	; 0x01
    1720:	42 83       	std	Z+2, r20	; 0x02
    1722:	53 83       	std	Z+3, r21	; 0x03
    1724:	08 95       	ret
    1726:	d3 d0       	rcall	.+422    	; 0x18ce <__fp_pscA>
    1728:	28 f0       	brcs	.+10     	; 0x1734 <modf+0x74>
    172a:	d8 d0       	rcall	.+432    	; 0x18dc <__fp_pscB>
    172c:	18 f0       	brcs	.+6      	; 0x1734 <modf+0x74>
    172e:	95 23       	and	r25, r21
    1730:	09 f0       	breq	.+2      	; 0x1734 <modf+0x74>
    1732:	ed ce       	rjmp	.-550    	; 0x150e <__fp_inf>
    1734:	f2 ce       	rjmp	.-540    	; 0x151a <__fp_nan>
    1736:	11 24       	eor	r1, r1
    1738:	3b cf       	rjmp	.-394    	; 0x15b0 <__fp_szero>

0000173a <__mulsf3x>:
    173a:	17 df       	rcall	.-466    	; 0x156a <__fp_split3>
    173c:	a0 f3       	brcs	.-24     	; 0x1726 <modf+0x66>

0000173e <__mulsf3_pse>:
    173e:	95 9f       	mul	r25, r21
    1740:	d1 f3       	breq	.-12     	; 0x1736 <modf+0x76>
    1742:	95 0f       	add	r25, r21
    1744:	50 e0       	ldi	r21, 0x00	; 0
    1746:	55 1f       	adc	r21, r21
    1748:	62 9f       	mul	r22, r18
    174a:	f0 01       	movw	r30, r0
    174c:	72 9f       	mul	r23, r18
    174e:	bb 27       	eor	r27, r27
    1750:	f0 0d       	add	r31, r0
    1752:	b1 1d       	adc	r27, r1
    1754:	63 9f       	mul	r22, r19
    1756:	aa 27       	eor	r26, r26
    1758:	f0 0d       	add	r31, r0
    175a:	b1 1d       	adc	r27, r1
    175c:	aa 1f       	adc	r26, r26
    175e:	64 9f       	mul	r22, r20
    1760:	66 27       	eor	r22, r22
    1762:	b0 0d       	add	r27, r0
    1764:	a1 1d       	adc	r26, r1
    1766:	66 1f       	adc	r22, r22
    1768:	82 9f       	mul	r24, r18
    176a:	22 27       	eor	r18, r18
    176c:	b0 0d       	add	r27, r0
    176e:	a1 1d       	adc	r26, r1
    1770:	62 1f       	adc	r22, r18
    1772:	73 9f       	mul	r23, r19
    1774:	b0 0d       	add	r27, r0
    1776:	a1 1d       	adc	r26, r1
    1778:	62 1f       	adc	r22, r18
    177a:	83 9f       	mul	r24, r19
    177c:	a0 0d       	add	r26, r0
    177e:	61 1d       	adc	r22, r1
    1780:	22 1f       	adc	r18, r18
    1782:	74 9f       	mul	r23, r20
    1784:	33 27       	eor	r19, r19
    1786:	a0 0d       	add	r26, r0
    1788:	61 1d       	adc	r22, r1
    178a:	23 1f       	adc	r18, r19
    178c:	84 9f       	mul	r24, r20
    178e:	60 0d       	add	r22, r0
    1790:	21 1d       	adc	r18, r1
    1792:	82 2f       	mov	r24, r18
    1794:	76 2f       	mov	r23, r22
    1796:	6a 2f       	mov	r22, r26
    1798:	11 24       	eor	r1, r1
    179a:	9f 57       	subi	r25, 0x7F	; 127
    179c:	50 40       	sbci	r21, 0x00	; 0
    179e:	8a f0       	brmi	.+34     	; 0x17c2 <__mulsf3_pse+0x84>
    17a0:	e1 f0       	breq	.+56     	; 0x17da <__mulsf3_pse+0x9c>
    17a2:	88 23       	and	r24, r24
    17a4:	4a f0       	brmi	.+18     	; 0x17b8 <__mulsf3_pse+0x7a>
    17a6:	ee 0f       	add	r30, r30
    17a8:	ff 1f       	adc	r31, r31
    17aa:	bb 1f       	adc	r27, r27
    17ac:	66 1f       	adc	r22, r22
    17ae:	77 1f       	adc	r23, r23
    17b0:	88 1f       	adc	r24, r24
    17b2:	91 50       	subi	r25, 0x01	; 1
    17b4:	50 40       	sbci	r21, 0x00	; 0
    17b6:	a9 f7       	brne	.-22     	; 0x17a2 <__mulsf3_pse+0x64>
    17b8:	9e 3f       	cpi	r25, 0xFE	; 254
    17ba:	51 05       	cpc	r21, r1
    17bc:	70 f0       	brcs	.+28     	; 0x17da <__mulsf3_pse+0x9c>
    17be:	a7 ce       	rjmp	.-690    	; 0x150e <__fp_inf>
    17c0:	f7 ce       	rjmp	.-530    	; 0x15b0 <__fp_szero>
    17c2:	5f 3f       	cpi	r21, 0xFF	; 255
    17c4:	ec f3       	brlt	.-6      	; 0x17c0 <__mulsf3_pse+0x82>
    17c6:	98 3e       	cpi	r25, 0xE8	; 232
    17c8:	dc f3       	brlt	.-10     	; 0x17c0 <__mulsf3_pse+0x82>
    17ca:	86 95       	lsr	r24
    17cc:	77 95       	ror	r23
    17ce:	67 95       	ror	r22
    17d0:	b7 95       	ror	r27
    17d2:	f7 95       	ror	r31
    17d4:	e7 95       	ror	r30
    17d6:	9f 5f       	subi	r25, 0xFF	; 255
    17d8:	c1 f7       	brne	.-16     	; 0x17ca <__mulsf3_pse+0x8c>
    17da:	fe 2b       	or	r31, r30
    17dc:	88 0f       	add	r24, r24
    17de:	91 1d       	adc	r25, r1
    17e0:	96 95       	lsr	r25
    17e2:	87 95       	ror	r24
    17e4:	97 f9       	bld	r25, 7
    17e6:	08 95       	ret

000017e8 <__subsf3>:
    17e8:	50 58       	subi	r21, 0x80	; 128

000017ea <__addsf3>:
    17ea:	bb 27       	eor	r27, r27
    17ec:	aa 27       	eor	r26, r26
    17ee:	0e d0       	rcall	.+28     	; 0x180c <__addsf3x>
    17f0:	7c c0       	rjmp	.+248    	; 0x18ea <__fp_round>
    17f2:	6d d0       	rcall	.+218    	; 0x18ce <__fp_pscA>
    17f4:	30 f0       	brcs	.+12     	; 0x1802 <__addsf3+0x18>
    17f6:	72 d0       	rcall	.+228    	; 0x18dc <__fp_pscB>
    17f8:	20 f0       	brcs	.+8      	; 0x1802 <__addsf3+0x18>
    17fa:	31 f4       	brne	.+12     	; 0x1808 <__addsf3+0x1e>
    17fc:	9f 3f       	cpi	r25, 0xFF	; 255
    17fe:	11 f4       	brne	.+4      	; 0x1804 <__addsf3+0x1a>
    1800:	1e f4       	brtc	.+6      	; 0x1808 <__addsf3+0x1e>
    1802:	8b ce       	rjmp	.-746    	; 0x151a <__fp_nan>
    1804:	0e f4       	brtc	.+2      	; 0x1808 <__addsf3+0x1e>
    1806:	e0 95       	com	r30
    1808:	e7 fb       	bst	r30, 7
    180a:	81 ce       	rjmp	.-766    	; 0x150e <__fp_inf>

0000180c <__addsf3x>:
    180c:	e9 2f       	mov	r30, r25
    180e:	ad de       	rcall	.-678    	; 0x156a <__fp_split3>
    1810:	80 f3       	brcs	.-32     	; 0x17f2 <__addsf3+0x8>
    1812:	ba 17       	cp	r27, r26
    1814:	62 07       	cpc	r22, r18
    1816:	73 07       	cpc	r23, r19
    1818:	84 07       	cpc	r24, r20
    181a:	95 07       	cpc	r25, r21
    181c:	18 f0       	brcs	.+6      	; 0x1824 <__addsf3x+0x18>
    181e:	71 f4       	brne	.+28     	; 0x183c <__addsf3x+0x30>
    1820:	9e f5       	brtc	.+102    	; 0x1888 <__addsf3x+0x7c>
    1822:	c5 ce       	rjmp	.-630    	; 0x15ae <__fp_zero>
    1824:	0e f4       	brtc	.+2      	; 0x1828 <__addsf3x+0x1c>
    1826:	e0 95       	com	r30
    1828:	0b 2e       	mov	r0, r27
    182a:	ba 2f       	mov	r27, r26
    182c:	a0 2d       	mov	r26, r0
    182e:	0b 01       	movw	r0, r22
    1830:	b9 01       	movw	r22, r18
    1832:	90 01       	movw	r18, r0
    1834:	0c 01       	movw	r0, r24
    1836:	ca 01       	movw	r24, r20
    1838:	a0 01       	movw	r20, r0
    183a:	11 24       	eor	r1, r1
    183c:	ff 27       	eor	r31, r31
    183e:	59 1b       	sub	r21, r25
    1840:	99 f0       	breq	.+38     	; 0x1868 <__addsf3x+0x5c>
    1842:	59 3f       	cpi	r21, 0xF9	; 249
    1844:	50 f4       	brcc	.+20     	; 0x185a <__addsf3x+0x4e>
    1846:	50 3e       	cpi	r21, 0xE0	; 224
    1848:	68 f1       	brcs	.+90     	; 0x18a4 <__addsf3x+0x98>
    184a:	1a 16       	cp	r1, r26
    184c:	f0 40       	sbci	r31, 0x00	; 0
    184e:	a2 2f       	mov	r26, r18
    1850:	23 2f       	mov	r18, r19
    1852:	34 2f       	mov	r19, r20
    1854:	44 27       	eor	r20, r20
    1856:	58 5f       	subi	r21, 0xF8	; 248
    1858:	f3 cf       	rjmp	.-26     	; 0x1840 <__addsf3x+0x34>
    185a:	46 95       	lsr	r20
    185c:	37 95       	ror	r19
    185e:	27 95       	ror	r18
    1860:	a7 95       	ror	r26
    1862:	f0 40       	sbci	r31, 0x00	; 0
    1864:	53 95       	inc	r21
    1866:	c9 f7       	brne	.-14     	; 0x185a <__addsf3x+0x4e>
    1868:	7e f4       	brtc	.+30     	; 0x1888 <__addsf3x+0x7c>
    186a:	1f 16       	cp	r1, r31
    186c:	ba 0b       	sbc	r27, r26
    186e:	62 0b       	sbc	r22, r18
    1870:	73 0b       	sbc	r23, r19
    1872:	84 0b       	sbc	r24, r20
    1874:	ba f0       	brmi	.+46     	; 0x18a4 <__addsf3x+0x98>
    1876:	91 50       	subi	r25, 0x01	; 1
    1878:	a1 f0       	breq	.+40     	; 0x18a2 <__addsf3x+0x96>
    187a:	ff 0f       	add	r31, r31
    187c:	bb 1f       	adc	r27, r27
    187e:	66 1f       	adc	r22, r22
    1880:	77 1f       	adc	r23, r23
    1882:	88 1f       	adc	r24, r24
    1884:	c2 f7       	brpl	.-16     	; 0x1876 <__addsf3x+0x6a>
    1886:	0e c0       	rjmp	.+28     	; 0x18a4 <__addsf3x+0x98>
    1888:	ba 0f       	add	r27, r26
    188a:	62 1f       	adc	r22, r18
    188c:	73 1f       	adc	r23, r19
    188e:	84 1f       	adc	r24, r20
    1890:	48 f4       	brcc	.+18     	; 0x18a4 <__addsf3x+0x98>
    1892:	87 95       	ror	r24
    1894:	77 95       	ror	r23
    1896:	67 95       	ror	r22
    1898:	b7 95       	ror	r27
    189a:	f7 95       	ror	r31
    189c:	9e 3f       	cpi	r25, 0xFE	; 254
    189e:	08 f0       	brcs	.+2      	; 0x18a2 <__addsf3x+0x96>
    18a0:	b3 cf       	rjmp	.-154    	; 0x1808 <__addsf3+0x1e>
    18a2:	93 95       	inc	r25
    18a4:	88 0f       	add	r24, r24
    18a6:	08 f0       	brcs	.+2      	; 0x18aa <__addsf3x+0x9e>
    18a8:	99 27       	eor	r25, r25
    18aa:	ee 0f       	add	r30, r30
    18ac:	97 95       	ror	r25
    18ae:	87 95       	ror	r24
    18b0:	08 95       	ret

000018b2 <__fp_mpack>:
    18b2:	9f 3f       	cpi	r25, 0xFF	; 255
    18b4:	31 f0       	breq	.+12     	; 0x18c2 <__fp_mpack_finite+0xc>

000018b6 <__fp_mpack_finite>:
    18b6:	91 50       	subi	r25, 0x01	; 1
    18b8:	20 f4       	brcc	.+8      	; 0x18c2 <__fp_mpack_finite+0xc>
    18ba:	87 95       	ror	r24
    18bc:	77 95       	ror	r23
    18be:	67 95       	ror	r22
    18c0:	b7 95       	ror	r27
    18c2:	88 0f       	add	r24, r24
    18c4:	91 1d       	adc	r25, r1
    18c6:	96 95       	lsr	r25
    18c8:	87 95       	ror	r24
    18ca:	97 f9       	bld	r25, 7
    18cc:	08 95       	ret

000018ce <__fp_pscA>:
    18ce:	00 24       	eor	r0, r0
    18d0:	0a 94       	dec	r0
    18d2:	16 16       	cp	r1, r22
    18d4:	17 06       	cpc	r1, r23
    18d6:	18 06       	cpc	r1, r24
    18d8:	09 06       	cpc	r0, r25
    18da:	08 95       	ret

000018dc <__fp_pscB>:
    18dc:	00 24       	eor	r0, r0
    18de:	0a 94       	dec	r0
    18e0:	12 16       	cp	r1, r18
    18e2:	13 06       	cpc	r1, r19
    18e4:	14 06       	cpc	r1, r20
    18e6:	05 06       	cpc	r0, r21
    18e8:	08 95       	ret

000018ea <__fp_round>:
    18ea:	09 2e       	mov	r0, r25
    18ec:	03 94       	inc	r0
    18ee:	00 0c       	add	r0, r0
    18f0:	11 f4       	brne	.+4      	; 0x18f6 <__fp_round+0xc>
    18f2:	88 23       	and	r24, r24
    18f4:	52 f0       	brmi	.+20     	; 0x190a <__fp_round+0x20>
    18f6:	bb 0f       	add	r27, r27
    18f8:	40 f4       	brcc	.+16     	; 0x190a <__fp_round+0x20>
    18fa:	bf 2b       	or	r27, r31
    18fc:	11 f4       	brne	.+4      	; 0x1902 <__fp_round+0x18>
    18fe:	60 ff       	sbrs	r22, 0
    1900:	04 c0       	rjmp	.+8      	; 0x190a <__fp_round+0x20>
    1902:	6f 5f       	subi	r22, 0xFF	; 255
    1904:	7f 4f       	sbci	r23, 0xFF	; 255
    1906:	8f 4f       	sbci	r24, 0xFF	; 255
    1908:	9f 4f       	sbci	r25, 0xFF	; 255
    190a:	08 95       	ret

0000190c <_exit>:
    190c:	f8 94       	cli

0000190e <__stop_program>:
    190e:	ff cf       	rjmp	.-2      	; 0x190e <__stop_program>
